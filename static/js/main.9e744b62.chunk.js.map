{"version":3,"sources":["api/TaskAPI.ts","reducers/Todolists_Reducer.ts","api/AuthAPI.ts","api/TodolistAPI.ts","reducers/Tasks_Reducer.ts","reducers/App-reducer.ts","utils/error-utils.ts","reducers/Auth-reducer.ts","components/ErrorSnackbar.tsx","components/Login.tsx","components/AddItem.tsx","components/EditItem.tsx","Tasks.tsx","Todolist.tsx","TodolistList.tsx","App.tsx","serviceWorker.ts","store/store.ts","index.tsx"],"names":["TaskStatuses","initialAPI","axios","create","baseURL","withCredentials","headers","TLActionType","taskAPI","todolistId","get","title","post","taskId","modalTask","put","delete","authAPI","data","todolistAPI","TaskActionType","initialTL","changeFilterTL_AC","filter","type","SET_FILTER","id","changeTodolistEntityStatusAC","entityStatus","CHANGE_TODOLIST_ENTITY_STATUS","getTodolistsTC","dispatch","setAppStatusAC","then","res","todolists","todoWithFilter","map","m","getFilter","GET_TL","catch","error","handleServerNetworkError","createTodolistTC","todo","resultCode","item","ADD_TL","setAppErrorAC","messages","deleteTodolistTC","handleServerTodolistResponse","DELETE_TL","deleteTL_AC","updateTodolistTC","CHANGETITLE_TL","changeTitleTL_AC","AppActionType","initialTasks","changeTaskEntityStatusAC","CHANGE_TASK_ENTITY_STATUS","getTasksTC","tasks","GET_TASKS","getTasks_AC","items","addTaskTC","task","ADD_TASK","updateTaskTC","model","getState","f","apiModel","description","status","priority","startDate","deadline","handleServerTaskResponse","UPDATE_TASK","updateTask_AC","deleteTaskTC","DELETETASK","taskID","deleteTask_AC","message","localStorage","getItem","initialState","isLoggedIn","setIsLoggedInAC","value","isInitialized","SET_STATUS","payload","SET_ERROR","initializeAppTC","finally","SET_IS_INITIALIZED","Alert","React","forwardRef","props","ref","elevation","variant","ErrorSnackbar","useDispatch","useSelector","state","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","auth","formik","useFormik","initialValues","email","password","rememberMe","onSubmit","values","resetForm","validate","errors","test","length","to","Grid","container","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","TextField","label","margin","getFieldProps","touched","style","color","FormControlLabel","control","Checkbox","Button","disabled","isValid","dirty","AddItem","memo","useState","setTitle","setError","addItem","trim","onChange","e","currentTarget","onKeyPress","key","helperText","IconButton","onClick","AddBox","EditItem","edit","setEdit","onDoubleClick","className","editStateItem","placeholder","autoFocus","Tasks","Completed","checked","New","todoListId","CircularProgress","disableShrink","size","Delete","Todolist","todolist","todolistEntityStatus","tasksForTodolist","t","useEffect","TodolistList","addTodolist","useCallback","setItem","saveFilterToLocalStorage","padding","spacing","tl","Paper","App","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","copyState","forEach","newTasks","store","createStore","applyMiddleware","thunk","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.9e744b62.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport const initialAPI = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1',\r\n    withCredentials: true,\r\n    headers:{\r\n        'api-key': 'b9ab541c-e0c5-4e3f-a6cb-7e9f4deadb80'\r\n    }\r\n})\r\n\r\nexport type ModalType = {\r\n    title?: string\r\n    status?: TaskStatuses\r\n}\r\n\r\nexport type UpdateModalType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport type TaskDomainType = {\r\n    addedDate: string\r\n    deadline: string\r\n    description: string\r\n    id: string\r\n    order: number\r\n    priority: number\r\n    startDate: string\r\n    status: TaskStatuses\r\n    title: string\r\n    todoListId: string\r\n\r\n\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport type TasksAPIType = {\r\n    items: Array<TaskDomainType>\r\n}\r\ntype CreateTaskType = {\r\n    data:{\r\n        item:TaskDomainType\r\n    }\r\n    resultCode: number\r\n    messages: string[]\r\n}\r\nexport const taskAPI = {\r\n    getTasks(todolistId:string){\r\n       return initialAPI.get<TasksAPIType>(`/todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId:string, title:string){\r\n       return initialAPI.post<CreateTaskType>(`/todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    updateTask(todolistId:string, taskId:string, modalTask: UpdateModalType){\r\n       return initialAPI.put<CreateTaskType>(`/todo-lists/${todolistId}/tasks/${taskId}`, modalTask)\r\n    },\r\n    deleteTask(todolistId:string, taskId:string){\r\n       return initialAPI.delete(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    }\r\n}\r\n","import {Dispatch} from 'redux';\r\nimport {todolistAPI, TodolistAPIType} from '../api/TodolistAPI';\r\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from './App-reducer';\r\nimport {AxiosError} from 'axios';\r\nimport {getFilter, handleServerNetworkError, handleServerTodolistResponse} from '../utils/error-utils';\r\n\r\nexport enum TLActionType {\r\n    GET_TL = 'GET_TL',\r\n    DELETE_TL = 'DELETE_TL',\r\n    SET_FILTER = 'SET_FILTER',\r\n    ADD_TL = 'ADD_TL',\r\n    CHANGETITLE_TL = 'CHANGETITLE_TL',\r\n    CHANGE_TODOLIST_ENTITY_STATUS = 'CHANGE_TODOLIST_ENTITY_STATUS'\r\n}\r\n\r\nexport type ChangeTodolistEntityStatusType = ReturnType<typeof changeTodolistEntityStatusAC>\r\ntype ActionTLType =\r\n    ReturnType<typeof changeFilterTL_AC>\r\n    | ReturnType<typeof deleteTL_AC>\r\n    | ReturnType<typeof addTodolist_AC>\r\n    | ReturnType<typeof changeTitleTL_AC>\r\n    | ReturnType<typeof getTodolists_AC>\r\n    | ChangeTodolistEntityStatusType\r\n\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodosType = TodolistAPIType & {\r\n    filter: FilterValuesType,\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nlet initialTL: Array<TodosType> = [\r\n    // {id: todolistId1, title: 'What to learn', filter: 'all'},\r\n    // {id: todolistId2, title: 'What to buy', filter: 'all'}\r\n];\r\n\r\nexport const reducerTL = (state: Array<TodosType> = initialTL, action: ActionTLType): Array<TodosType> => {\r\n    switch (action.type) {\r\n        case TLActionType.GET_TL:\r\n            // return action.todolists.map(m => ({...m, filter: localStorage.getItem(m.id) as FilterValuesType || 'all', entityStatus: 'idle'}))\r\n            return action.todolists\r\n        case TLActionType.ADD_TL:\r\n            return [{...action.todo, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case TLActionType.DELETE_TL:\r\n            return state.filter(f => f.id !== action.id)\r\n        case TLActionType.SET_FILTER:\r\n            return state.map(m => m.id === action.id ? {...m, filter: action.filter} : m)\r\n        case TLActionType.CHANGETITLE_TL:\r\n            return state.map(m => m.id === action.id ? {...m, title: action.title} : m)\r\n        case TLActionType.CHANGE_TODOLIST_ENTITY_STATUS:\r\n            return state.map(m => m.id === action.todolistId ? {...m, entityStatus: action.entityStatus} : m)\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\n// Action creator\r\n\r\nexport const changeFilterTL_AC = (todolistId: string, filter: FilterValuesType) => {\r\n    return {\r\n        type: TLActionType.SET_FILTER,\r\n        id: todolistId,\r\n        filter\r\n    } as const\r\n}\r\nexport const deleteTL_AC = (todolistId: string) => {\r\n    return {\r\n        type: TLActionType.DELETE_TL,\r\n        id: todolistId\r\n    } as const\r\n}\r\nexport const addTodolist_AC = (todo: TodolistAPIType) => {\r\n    return {\r\n        type: TLActionType.ADD_TL,\r\n        todo,\r\n    } as const\r\n}\r\nexport const changeTitleTL_AC = (todolistId: string, title: string) => {\r\n    return {\r\n        type: TLActionType.CHANGETITLE_TL,\r\n        id: todolistId,\r\n        title\r\n    } as const\r\n}\r\nexport const getTodolists_AC = (todolists: Array<TodosType>) => {\r\n    return {\r\n        type: TLActionType.GET_TL,\r\n        todolists\r\n    } as const\r\n}\r\nexport const changeTodolistEntityStatusAC = (todolistId: string, entityStatus: RequestStatusType) => {\r\n    return {\r\n        type: TLActionType.CHANGE_TODOLIST_ENTITY_STATUS,\r\n        entityStatus,\r\n        todolistId\r\n    } as const\r\n}\r\n\r\n// Thunk creator\r\n\r\nexport const getTodolistsTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.getTodolists()\r\n        .then(res => {\r\n            let todoWithFilter = res.data\r\n                .map(m => ({...m, filter: getFilter(m.id), entityStatus: 'idle' as RequestStatusType}))\r\n            dispatch(getTodolists_AC(todoWithFilter))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const createTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.createTodolist(title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTodolist_AC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                dispatch(setAppErrorAC(res.data.messages[0]))\r\n                dispatch(setAppStatusAC('failed'))\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const deleteTodolistTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    handleServerTodolistResponse(todolistId, 'loading', dispatch)\r\n    todolistAPI.deleteTodolist(todolistId)\r\n        .then(() => {\r\n            dispatch(deleteTL_AC(todolistId))\r\n            handleServerTodolistResponse(todolistId, 'succeeded', dispatch)\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(error, dispatch)\r\n            dispatch(changeTodolistEntityStatusAC(todolistId, 'failed'))\r\n        })\r\n}\r\nexport const updateTodolistTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n    handleServerTodolistResponse(todolistId, 'loading', dispatch)\r\n    todolistAPI.updateTodolist(todolistId, title)\r\n        .then(() => {\r\n            dispatch(changeTitleTL_AC(todolistId, title))\r\n            handleServerTodolistResponse(todolistId, 'succeeded', dispatch)\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(error, dispatch)\r\n            dispatch(changeTodolistEntityStatusAC(todolistId, 'failed'))\r\n        })\r\n}\r\nexport const saveFilterToLocalStorage = (todolists: Array<TodosType>) => () => {\r\n    todolists.map(m => {\r\n        return localStorage.setItem(m.id, m.filter)\r\n    })\r\n}\r\n\r\n\r\n\r\n","import {initialAPI} from './TaskAPI';\r\nimport {TodolistAPIType} from './TodolistAPI';\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password:string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\ntype AuthLoginType = {\r\n    data:{\r\n        userId: number\r\n    }\r\n    resultCode: number\r\n    messages: string[]\r\n}\r\ntype AuthMeType = {\r\n    data:{\r\n        id: number\r\n        email: string\r\n        login: string\r\n    }\r\n    resultCode: number\r\n    messages: string[]\r\n}\r\n\r\n\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return initialAPI.post<AuthLoginType>(`/auth/login`, data)\r\n    },\r\n    me(){\r\n        return initialAPI.get<AuthMeType>(`/auth/me`)\r\n    },\r\n    logout(){\r\n        return initialAPI.delete(`/auth/login`)\r\n    }\r\n}\r\n","import {initialAPI} from './TaskAPI';\r\n\r\nexport type TodolistAPIType = {\r\n        addedDate: string\r\n        id: string\r\n        order: number\r\n        title: string\r\n}\r\ntype CreateTLType = {\r\n    data:{\r\n        item:TodolistAPIType\r\n    }\r\n    resultCode: number\r\n    messages: string[]\r\n}\r\nexport const todolistAPI = {\r\n    getTodolists(){\r\n        return initialAPI.get<TodolistAPIType[]>(`/todo-lists`)\r\n    },\r\n    createTodolist(title:string){\r\n        return initialAPI.post<CreateTLType>(`/todo-lists`, {title})\r\n    },\r\n    updateTodolist(todolistId:string, title:string){\r\n        return initialAPI.put(`/todo-lists/${todolistId}`, {title})\r\n    },\r\n    deleteTodolist(todolistId:string){\r\n        return initialAPI.delete(`/todo-lists/${todolistId}`)\r\n    }\r\n}\r\n","import {\r\n    addTodolist_AC,\r\n    changeTodolistEntityStatusAC,\r\n    deleteTL_AC,\r\n    getTodolists_AC,\r\n    TLActionType\r\n} from './Todolists_Reducer';\r\nimport {Dispatch} from 'redux';\r\nimport {ModalType, taskAPI, TaskDomainType, UpdateModalType} from '../api/TaskAPI';\r\nimport {rootReducerType} from '../store/store';\r\nimport {RequestStatusType, setAppErrorAC} from './App-reducer';\r\nimport {AxiosError} from 'axios';\r\nimport {handleServerNetworkError, handleServerTaskResponse, handleServerTodolistResponse} from '../utils/error-utils';\r\n\r\nexport enum TaskActionType {\r\n    DELETETASK = 'DELETETASK',\r\n    ADD_TASK = 'ADD_TASK',\r\n    GET_TASKS = 'GET_TASKS',\r\n    UPDATE_TASK = 'UPDATE_TASK',\r\n    CHANGE_TASK_ENTITY_STATUS = 'CHANGE_TASK_ENTITY_STATUS'\r\n}\r\n\r\nexport type ChangeTaskEntityStatusType = ReturnType<typeof changeTaskEntityStatusAC>\r\ntype ActionTasksType =\r\n    ReturnType<typeof deleteTL_AC>\r\n    | ReturnType<typeof addTodolist_AC>\r\n    | ReturnType<typeof deleteTask_AC>\r\n    | ReturnType<typeof addTask_AC>\r\n    | ReturnType<typeof getTodolists_AC>\r\n    | ReturnType<typeof getTasks_AC>\r\n    | ReturnType<typeof updateTask_AC>\r\n    | ChangeTaskEntityStatusType\r\n\r\nexport type TasksType = {\r\n    [key: string]: Array<TaskDomainType & {\r\n        entityStatus: RequestStatusType\r\n    }>\r\n}\r\n\r\nlet initialTasks: TasksType = {\r\n    // [todolistId1]: [\r\n    //     {id: v1(), title: 'HTML', isDone: true},\r\n    //     {id: v1(), title: 'CSS', isDone: true},\r\n    //     {id: v1(), title: 'JS', isDone: false},\r\n    //     {id: v1(), title: 'TS', isDone: false},\r\n    //     {id: v1(), title: 'Java', isDone: false}\r\n    // ],\r\n    // [todolistId2]: [\r\n    //     {id: v1(), title: 'Beer', isDone: true},\r\n    //     {id: v1(), title: 'Fish', isDone: true},\r\n    //     {id: v1(), title: 'Chips', isDone: false},\r\n    //     {id: v1(), title: 'Some milk', isDone: false},\r\n    //     {id: v1(), title: 'Vine', isDone: false}\r\n    // ]\r\n};\r\n\r\nexport const reducerTasks = (state: TasksType = initialTasks, action: ActionTasksType): TasksType => {\r\n    switch (action.type) {\r\n        case TLActionType.GET_TL: {\r\n            let copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case TaskActionType.GET_TASKS:\r\n            return {...state, [action.todolistId]: action.tasks.map(m => ({...m, entityStatus: 'idle'}))}\r\n\r\n        case TLActionType.DELETE_TL:\r\n            let newTasks = {...state};\r\n            delete newTasks[action.id]\r\n            return newTasks\r\n        case TLActionType.ADD_TL:\r\n            return {...state, [action.todo.id]: []}\r\n        case TaskActionType.DELETETASK:\r\n            return {...state, [action.id]: state[action.id].filter(f => f.id !== action.taskID)}\r\n        case TaskActionType.ADD_TASK:\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: [{...action.task, entityStatus: 'idle'}, ...state[action.task.todoListId]]\r\n            }\r\n        case TaskActionType.UPDATE_TASK:\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(m => m.id === action.taskId ? {...m, ...action.model} : m)\r\n            }\r\n        case TaskActionType.CHANGE_TASK_ENTITY_STATUS:\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(m => m.id === action.taskId ? {...m, entityStatus: action.entityStatus} : m)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// action creator\r\n\r\nexport const deleteTask_AC = (todolistId: string, taskId: string) => {\r\n    return {\r\n        type: TaskActionType.DELETETASK,\r\n        id: todolistId,\r\n        taskID: taskId\r\n    } as const\r\n}\r\nexport const addTask_AC = (task: TaskDomainType) => {\r\n    return {\r\n        type: TaskActionType.ADD_TASK,\r\n        task\r\n    } as const\r\n}\r\n\r\nexport const updateTask_AC = (todolistId: string, taskId: string, model: ModalType) => {\r\n    return {\r\n        type: TaskActionType.UPDATE_TASK,\r\n        model,\r\n        todolistId,\r\n        taskId\r\n    } as const\r\n}\r\n\r\nexport const getTasks_AC = (tasks: Array<TaskDomainType>, todolistId: string) => {\r\n    return {\r\n        type: TaskActionType.GET_TASKS,\r\n        tasks,\r\n        todolistId\r\n    } as const\r\n}\r\nexport const changeTaskEntityStatusAC = (todolistId: string, entityStatus: RequestStatusType, taskId: string) => {\r\n    return {\r\n        type: TaskActionType.CHANGE_TASK_ENTITY_STATUS,\r\n        entityStatus,\r\n        todolistId,\r\n        taskId\r\n    } as const\r\n}\r\n// Thunk creator\r\n\r\nexport const getTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    handleServerTodolistResponse(todolistId, 'loading', dispatch)\r\n    taskAPI.getTasks(todolistId)\r\n        .then(res => {\r\n            dispatch(getTasks_AC(res.data.items, todolistId))\r\n            handleServerTodolistResponse(todolistId, 'succeeded', dispatch)\r\n        }).catch((error:AxiosError)=>{\r\n        handleServerNetworkError(error, dispatch)\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'failed'))\r\n    })\r\n}\r\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n    handleServerTodolistResponse(todolistId, 'loading', dispatch)\r\n    taskAPI.createTask(todolistId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTask_AC(res.data.data.item))\r\n                handleServerTodolistResponse(todolistId, 'succeeded', dispatch)\r\n            } else {\r\n                dispatch(setAppErrorAC(res.data.messages[0]))\r\n                handleServerTodolistResponse(todolistId, 'failed', dispatch)\r\n            }\r\n\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(error, dispatch)\r\n            dispatch(changeTodolistEntityStatusAC(todolistId, 'failed'))\r\n        })\r\n\r\n\r\n}\r\nexport const updateTaskTC = (todolistId: string, taskId: string, model: ModalType) =>\r\n    (dispatch: Dispatch, getState: () => rootReducerType) => {\r\n        const task = getState().tasks[todolistId].filter(f => f.id === taskId)[0]\r\n\r\n        let apiModel: UpdateModalType = {\r\n            description: task.description,\r\n            status: task.status,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            deadline: task.deadline,\r\n            title: task.title,\r\n            ...model\r\n        }\r\n        handleServerTaskResponse(todolistId, taskId, 'loading', dispatch)\r\n        taskAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updateTask_AC(todolistId, taskId, model))\r\n                    handleServerTaskResponse(todolistId, taskId, 'succeeded', dispatch)\r\n                }else{\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                    handleServerTaskResponse(todolistId, taskId, 'failed', dispatch)\r\n                }\r\n            })\r\n            .catch((error: AxiosError) => {\r\n                handleServerNetworkError(error, dispatch)\r\n                dispatch(changeTaskEntityStatusAC(todolistId, 'failed', taskId))\r\n            })\r\n    }\r\nexport const deleteTaskTC = (todolistId: string, taskId: string) => (dispatch: Dispatch) => {\r\n    handleServerTaskResponse(todolistId, taskId, 'loading', dispatch)\r\n    taskAPI.deleteTask(todolistId, taskId)\r\n        .then(() => {\r\n            dispatch(deleteTask_AC(todolistId, taskId))\r\n            handleServerTaskResponse(todolistId, taskId, 'succeeded', dispatch)\r\n        })\r\n        .catch((error: AxiosError)=>{\r\n            handleServerNetworkError(error, dispatch)\r\n            dispatch(changeTaskEntityStatusAC(todolistId, 'failed', taskId))\r\n        })\r\n}\r\n","import {Dispatch} from 'redux';\r\nimport {authAPI} from '../api/AuthAPI';\r\nimport {setIsLoggedInAC} from './Auth-reducer';\r\n\r\nexport type RequestStatusType =\r\n    'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\n\r\nenum AppActionType  {\r\n    SET_STATUS = 'SET_STATUS',\r\n    SET_ERROR = 'SET_ERROR',\r\n    SET_IS_INITIALIZED = 'SET_IS_INITIALIZED'\r\n}\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as null | string,\r\n    isInitialized: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case AppActionType.SET_STATUS:\r\n        case AppActionType.SET_ERROR:\r\n            return {\r\n                ...state,\r\n                 ...action.payload\r\n            }\r\n        case AppActionType.SET_IS_INITIALIZED:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType)=>{\r\n    return{\r\n        type: AppActionType.SET_STATUS,\r\n        payload:{\r\n            status\r\n        }\r\n    }\r\n}\r\nexport const setIsInitializedAC = (isInitialized:boolean)=>{\r\n    return{\r\n        type: AppActionType.SET_IS_INITIALIZED,\r\n        payload:{\r\n            isInitialized\r\n        }\r\n    } as const\r\n}\r\nexport const setAppErrorAC = (error: null | string)=>{\r\n    return{\r\n        type: AppActionType.SET_ERROR,\r\n        payload:{\r\n            error\r\n        }\r\n    }\r\n}\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true));\r\n        } else {\r\n        }\r\n    }).finally(()=>{\r\n        dispatch(setIsInitializedAC(true))\r\n    })\r\n}\r\n\r\nexport type AppStatusType = ReturnType<typeof setAppStatusAC>\r\nexport type AppErrorType = ReturnType<typeof setAppErrorAC>\r\ntype ActionsType = AppStatusType | AppErrorType | ReturnType<typeof setIsInitializedAC>\r\n","import { Dispatch } from 'redux';\r\nimport {AxiosError} from 'axios';\r\nimport {AppErrorType, AppStatusType, RequestStatusType, setAppErrorAC, setAppStatusAC} from '../reducers/App-reducer';\r\nimport {changeTaskEntityStatusAC, ChangeTaskEntityStatusType} from '../reducers/Tasks_Reducer';\r\nimport {\r\n    changeTodolistEntityStatusAC,\r\n    ChangeTodolistEntityStatusType,\r\n    FilterValuesType\r\n} from '../reducers/Todolists_Reducer';\r\n\r\n// generic function\r\nexport const handleServerTaskResponse =\r\n    (todolistId: string, taskId:string, status: RequestStatusType, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppStatusAC(status))\r\n    dispatch(changeTaskEntityStatusAC(todolistId, status, taskId))\r\n}\r\nexport const handleServerTodolistResponse =\r\n    (todolistId: string, status: RequestStatusType, dispatch: ErrorUtilsDispatchType) => {\r\n        dispatch(setAppStatusAC(status))\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, status))\r\n    }\r\n\r\nexport const handleServerNetworkError = (error: AxiosError, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC(error.message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\n\r\nexport const getFilter = (id:string)=>{\r\n    return localStorage.getItem(id) as FilterValuesType || 'all'\r\n}\r\ntype ErrorUtilsDispatchType = Dispatch<AppStatusType\r\n    | AppErrorType | ChangeTaskEntityStatusType | ChangeTodolistEntityStatusType>\r\n","import {Dispatch} from 'redux'\r\nimport {AppErrorType, AppStatusType, setAppErrorAC, setAppStatusAC} from './App-reducer';\r\nimport {taskAPI, UpdateModalType} from '../api/TaskAPI';\r\nimport {handleServerNetworkError, handleServerTaskResponse} from '../utils/error-utils';\r\nimport {AxiosError} from 'axios';\r\nimport {changeTaskEntityStatusAC, updateTask_AC} from './Tasks_Reducer';\r\nimport {authAPI, LoginParamsType} from '../api/AuthAPI';\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                dispatch(setAppErrorAC(res.data.messages[0]))\r\n                dispatch(setAppStatusAC('failed'))\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(error, dispatch)\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                dispatch(setAppErrorAC(res.data.messages[0]))\r\n                dispatch(setAppStatusAC('failed'))\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(error, dispatch)\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\n\r\n\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | AppStatusType | AppErrorType\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {rootReducerType} from '../store/store';\r\nimport {setAppErrorAC} from '../reducers/App-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n    const dispatch = useDispatch()\r\n    const error = useSelector<rootReducerType, null | string>(state => state.app.error)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error + ' 😠'}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from 'formik';\r\nimport {loginTC} from '../reducers/Auth-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {rootReducerType} from '../store/store';\r\nimport { Navigate } from 'react-router-dom';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<rootReducerType, boolean>(state => state.auth.isLoggedIn)\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Length password must be > 3';\r\n            }\r\n            return errors;\r\n        },\r\n    })\r\n\r\n    if(isLoggedIn) {\r\n       return <Navigate to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('email')}\r\n                        />\r\n                        {\r\n                            formik.touched.email &&\r\n                            formik.errors.email && <div style={{color: 'red'}}>\r\n                                {formik.errors.email}\r\n                            </div>\r\n                        }\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('password')}\r\n                        />\r\n                        {\r\n                            formik.touched.password &&\r\n                            formik.errors.password && <div style={{color: 'red'}}>\r\n                                {formik.errors.password}\r\n                            </div>\r\n                        }\r\n\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          control={<Checkbox\r\n                                              {...formik.getFieldProps('rememberMe')}\r\n                                          />}\r\n                        />\r\n                        <Button type={'submit'}\r\n                                variant={'contained'}\r\n                                color={'primary'}\r\n                                disabled={!formik.isValid || !formik.dirty}\r\n                        >\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {AddBox} from '@mui/icons-material';\r\nimport {IconButton, TextField} from '@mui/material';\r\n\r\ntype AddItemType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nconst AddItem = React.memo((props: AddItemType) => {\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim()) {\r\n            props.addItem(title.trim());\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.key === 'Enter') {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <TextField value={title}\r\n                       variant={'outlined'}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       error={!!error}\r\n                       label={'Title'}\r\n                       helperText={error}\r\n                       disabled={props.disabled}\r\n            />\r\n            <IconButton color={'primary'} onClick={addItem}  disabled={props.disabled}>\r\n                <AddBox/>\r\n            </IconButton>\r\n            {/*{error && <div className=\"error-message\">{error}</div>}*/}\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default AddItem;\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {TextField} from '@mui/material';\r\nimport {RequestStatusType} from '../reducers/App-reducer';\r\n\r\ntype EditItemType = {\r\n    title: string\r\n    editStateItem: (title: string) => void\r\n    entityStatus?: RequestStatusType\r\n}\r\n\r\nconst EditItem = React.memo((props: EditItemType) => {\r\n    const [edit, setEdit] = useState(true)\r\n    const [title, setTitle] = useState(props.title)\r\n    let [error, setError] = useState('')\r\n    const onDoubleClick = () => {\r\n        if (props.entityStatus === 'loading') {\r\n            return\r\n        }\r\n        setEdit(!edit)\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError('')\r\n    }\r\n    const onKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter' && title.trim()) {\r\n            props.editStateItem(title.trim())\r\n            setEdit(!edit)\r\n        } else {\r\n            setError('value not valid')\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        edit || props.entityStatus === 'loading' ?\r\n            <span onDoubleClick={onDoubleClick}>\r\n                {\r\n                    props.entityStatus === 'loading'\r\n                        ?\r\n                        'loading...'\r\n                        :\r\n                        props.title\r\n                }\r\n            </span>\r\n            : <TextField className=\"editItem\"\r\n                         variant={'outlined'}\r\n                         value={title}\r\n                         onChange={onChangeHandler}\r\n                         onKeyPress={onKeyPress}\r\n                         placeholder={error}\r\n                         autoFocus\r\n            />\r\n    );\r\n});\r\n\r\nexport default EditItem;\r\n","import React, {ChangeEvent} from 'react';\r\nimport {deleteTaskTC, updateTaskTC} from './reducers/Tasks_Reducer';\r\nimport {TaskDomainType, TaskStatuses} from './api/TaskAPI';\r\nimport {Checkbox, CircularProgress, IconButton} from '@mui/material';\r\nimport EditItem from './components/EditItem';\r\nimport {Delete} from '@mui/icons-material';\r\nimport {useDispatch} from 'react-redux';\r\nimport {RequestStatusType} from './reducers/App-reducer';\r\n\r\ntype PropsType = {\r\n    task: TaskDomainType & {\r\n        entityStatus: RequestStatusType\r\n    }\r\n}\r\n\r\n\r\nconst Tasks = ({task}: PropsType) => {\r\n    const dispatch = useDispatch()\r\n    const onClickHandler = () => dispatch(deleteTaskTC(task.todoListId, task.id))\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const status = e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New\r\n        dispatch(updateTaskTC(task.todoListId, task.id, {status}))\r\n    }\r\n    const editTask = (title: string) => {\r\n        dispatch(updateTaskTC(task.todoListId, task.id, {title}))\r\n    }\r\n    return <div key={task.id} className={task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox color={'primary'}\r\n                  onChange={onChangeHandler}\r\n                  checked={task.status > 0}/>\r\n        <EditItem title={task.title} editStateItem={editTask} entityStatus={task.entityStatus}/>\r\n        <IconButton onClick={onClickHandler} disabled={task.entityStatus === 'loading'}>\r\n            {\r\n                task.entityStatus === 'loading'\r\n                ?\r\n                <CircularProgress disableShrink size={17}/>\r\n                :\r\n                <Delete/>\r\n            }\r\n        </IconButton>\r\n    </div>\r\n};\r\n\r\nexport default Tasks;\r\n","import React, {useEffect} from 'react';\r\nimport AddItem from './components/AddItem';\r\nimport EditItem from './components/EditItem';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {rootReducerType} from './store/store';\r\nimport {changeFilterTL_AC, deleteTodolistTC, TodosType, updateTodolistTC} from './reducers/Todolists_Reducer';\r\nimport {addTaskTC, getTasksTC, TasksType,} from './reducers/Tasks_Reducer';\r\nimport {TaskStatuses} from './api/TaskAPI';\r\nimport {Delete} from '@mui/icons-material';\r\nimport {Button, CircularProgress, IconButton} from '@mui/material';\r\nimport {RequestStatusType} from './reducers/App-reducer';\r\nimport Tasks from './Tasks';\r\n\r\n\r\ntype PropsType = {\r\n    todolistId: string\r\n}\r\n\r\n\r\nexport const Todolist = React.memo(({todolistId}: PropsType) => {\r\n    let tasks = useSelector<rootReducerType, TasksType>(state => state.tasks)\r\n    let todolist = useSelector<rootReducerType, TodosType>(state => state.todolists.filter(f => f.id === todolistId)[0])\r\n    let dispatch = useDispatch();\r\n    let todolistEntityStatus = useSelector<rootReducerType, RequestStatusType>(state => state.todolists\r\n        .filter(f => f.id === todolistId)[0].entityStatus)\r\n\r\n    const onAllClickHandler = () => dispatch(changeFilterTL_AC(todolistId, 'all'));\r\n    const onActiveClickHandler = () => dispatch(changeFilterTL_AC(todolistId, 'active'));\r\n    const onCompletedClickHandler = () => dispatch(changeFilterTL_AC(todolistId, 'completed'));\r\n    const addItem = (title: string) => {\r\n        dispatch(addTaskTC(todolistId, title))\r\n    }\r\n    const editTL = (title: string) => {\r\n        dispatch(updateTodolistTC(todolistId, title))\r\n    }\r\n    let tasksForTodolist = tasks[todolistId];\r\n\r\n    if (todolist.filter === 'active') {\r\n        tasksForTodolist = tasksForTodolist.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (todolist.filter === 'completed') {\r\n        tasksForTodolist = tasksForTodolist.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    const deleteTodo = () => {\r\n        dispatch(deleteTodolistTC(todolistId))\r\n    }\r\n    useEffect(() => {\r\n        dispatch(getTasksTC(todolistId))\r\n    }, [])\r\n\r\n\r\n\r\n    return <div>\r\n        <h3><EditItem title={todolist.title} editStateItem={editTL} entityStatus={todolistEntityStatus}/>\r\n            <IconButton onClick={deleteTodo} disabled={todolistEntityStatus === 'loading'}>\r\n                {\r\n                    todolistEntityStatus === 'loading'\r\n                        ?\r\n                        <CircularProgress disableShrink size={17}/>\r\n                        :\r\n                        <Delete/>\r\n                }\r\n            </IconButton>\r\n        </h3>\r\n        <AddItem addItem={addItem} disabled={todolistEntityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => (\r\n                    <Tasks key={t.id}\r\n                           task={t}\r\n                    />\r\n                ))\r\n            }\r\n        </div>\r\n        <div>\r\n            <Button\r\n                variant={todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                onClick={onAllClickHandler}\r\n                color={'inherit'}\r\n            >\r\n                All\r\n            </Button>\r\n            <Button\r\n                variant={todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                onClick={onActiveClickHandler}\r\n                color={'primary'}\r\n            >\r\n                Active\r\n            </Button>\r\n            <Button\r\n                variant={todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                onClick={onCompletedClickHandler}\r\n                color={'secondary'}\r\n            >\r\n                Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {Grid, Paper} from '@mui/material';\r\nimport AddItem from './components/AddItem';\r\nimport {Todolist} from './Todolist';\r\nimport {createTodolistTC, getTodolistsTC, saveFilterToLocalStorage, TodosType} from './reducers/Todolists_Reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {rootReducerType} from './store/store';\r\nimport {Navigate} from 'react-router-dom';\r\n\r\nconst TodolistList = () => {\r\n    const isLoggedIn = useSelector<rootReducerType, boolean>(state => state.auth.isLoggedIn)\r\n    const todolists = useSelector<rootReducerType, TodosType[]>(state => state.todolists)\r\n    const dispatch = useDispatch()\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(createTodolistTC(title))\r\n    }, [dispatch])\r\n\r\n\r\n    useEffect(() => {\r\n        if (isLoggedIn) {\r\n            dispatch(getTodolistsTC())\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        dispatch(saveFilterToLocalStorage(todolists))\r\n    }, [todolists])\r\n    if (!isLoggedIn) {\r\n       return <Navigate to={'/login'}/>\r\n    }\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: '20px'}}>\r\n                <AddItem addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {\r\n                    todolists.map(tl => {\r\n                        return (\r\n                            <Grid item\r\n                                  key={tl.id}>\r\n\r\n                                <Paper style={{padding: '10px'}}>\r\n                                    <Todolist\r\n                                        todolistId={tl.id}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TodolistList;\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport AddItem from './components/AddItem';\r\nimport {createTodolistTC, getTodolistsTC, saveFilterToLocalStorage, TodosType} from './reducers/Todolists_Reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {rootReducerType} from './store/store';\r\n\r\nimport {initializeAppTC, RequestStatusType} from './reducers/App-reducer';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    Grid,\r\n    IconButton,\r\n    LinearProgress,\r\n    Paper,\r\n    Toolbar,\r\n    Typography\r\n} from '@mui/material';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from './components/ErrorSnackbar';\r\nimport {Routes, Route, Navigate} from 'react-router-dom';\r\nimport {Login} from './components/Login';\r\nimport TodolistList from './TodolistList';\r\nimport {logoutTC} from './reducers/Auth-reducer';\r\n\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch()\r\n    let status = useSelector<rootReducerType, RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<rootReducerType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<rootReducerType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n    dispatch(initializeAppTC())\r\n    },[])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    const logout = () => {\r\n      dispatch(logoutTC())\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position={'static'}>\r\n                <Toolbar>\r\n                    <IconButton edge={'start'}\r\n                                color={'inherit'}\r\n                                area-label={'menu'}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={'h6'}>\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color={'inherit'} onClick={logout}>Logout</Button>}\r\n                </Toolbar>\r\n            </AppBar>\r\n            {\r\n                status === 'loading' &&\r\n                <LinearProgress color=\"primary\" style={{position: 'relative'}}/>\r\n            }\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path=\"/login\" element={<Login/>}/>\r\n                    <Route path=\"/\" element={<TodolistList/>}/>\r\n                    <Route path=\"/404\" element={<h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Route path=\"*\" element={<Navigate to={'/404'}/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {reducerTasks} from '../reducers/Tasks_Reducer';\r\nimport {reducerTL} from '../reducers/Todolists_Reducer';\r\nimport thunk from 'redux-thunk';\r\nimport {appReducer} from '../reducers/App-reducer';\r\nimport {authReducer} from '../reducers/Auth-reducer';\r\n\r\n// let stateFromLS;\r\n// let stateString = localStorage.getItem('state')\r\n// if(stateString){\r\n//     stateFromLS = JSON.parse(stateString)\r\n// }\r\n\r\nlet rootReducer = combineReducers({\r\n    tasks: reducerTasks,\r\n    todolists: reducerTL,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\n\r\nexport type rootReducerType = ReturnType<typeof rootReducer>;\r\nexport let store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\n// store.subscribe(() => {\r\n//     localStorage.setItem('state', JSON.stringify(store.getState().todolists))\r\n// })\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './store/store';\r\nimport {BrowserRouter} from 'react-router-dom';\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter basename={'newTL'}>\r\n            <App/>\r\n        </BrowserRouter>\r\n</Provider>,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}