{"version":3,"sources":["api/TaskAPI.ts","components/AddItem.tsx","components/EditItem.tsx","reducers/Todolists_Reducer.ts","api/TodolistAPI.ts","reducers/Tasks_Reducer.ts","Todolist.tsx","App.tsx","serviceWorker.ts","store/store.ts","index.tsx"],"names":["TaskStatuses","AddItem","React","memo","props","useState","title","setTitle","error","setError","addItem","trim","value","onChange","e","currentTarget","onKeyPress","key","className","onClick","EditItem","edit","setEdit","onDoubleClick","editStateItem","placeholder","autoFocus","initialAPI","axios","create","baseURL","withCredentials","headers","TLActionType","taskAPI","todolistId","get","post","taskId","modalTask","put","delete","todolistAPI","TaskActionType","initialTL","changeFilterTL_AC","filter","type","SET_FILTER","id","getTodolistsTC","dispatch","then","res","todolists","data","GET_TL","createTodolistTC","todo","item","ADD_TL","deleteTodolistTC","DELETE_TL","deleteTL_AC","updateTodolistTC","CHANGETITLE_TL","changeTitleTL_AC","initialTasks","getTasksTC","tasks","GET_TASKS","getTasks_AC","items","addTaskTC","task","ADD_TASK","updateTaskTC","model","getState","f","apiModel","description","status","priority","startDate","deadline","UPDATE_TASK","updateTask_AC","deleteTaskTC","DELETETASK","taskID","deleteTask_AC","Todolist","useSelector","state","todolist","useDispatch","tasksForTodolist","t","New","Completed","useEffect","map","checked","App","addTodolist","useCallback","tl","Boolean","window","location","hostname","match","stateString","localStorage","getItem","JSON","parse","rootReducer","combineReducers","action","copyState","forEach","newTasks","todoListId","m","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.ad0a1466.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport const initialAPI = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1',\r\n    withCredentials: true,\r\n    headers:{\r\n        'api-key': 'b9ab541c-e0c5-4e3f-a6cb-7e9f4deadb80'\r\n    }\r\n})\r\n\r\nexport type ModalType = {\r\n    title?: string\r\n    status?: TaskStatuses\r\n}\r\n\r\nexport type UpdateModalType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport type TaskDomainType = {\r\n    addedDate: string\r\n    deadline: string\r\n    description: string\r\n    id: string\r\n    order: number\r\n    priority: number\r\n    startDate: string\r\n    status: TaskStatuses\r\n    title: string\r\n    todoListId: string\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport type TasksAPIType = {\r\n    items: Array<TaskDomainType>\r\n}\r\ntype CreateTaskType = {\r\n    data:{\r\n        item:TaskDomainType\r\n    }\r\n}\r\nexport const taskAPI = {\r\n    getTasks(todolistId:string){\r\n       return initialAPI.get<TasksAPIType>(`/todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId:string, title:string){\r\n       return initialAPI.post<CreateTaskType>(`/todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    updateTask(todolistId:string, taskId:string, modalTask: UpdateModalType){\r\n       return initialAPI.put<CreateTaskType>(`/todo-lists/${todolistId}/tasks/${taskId}`, modalTask)\r\n    },\r\n    deleteTask(todolistId:string, taskId:string){\r\n       return initialAPI.delete(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    }\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\ntype AddItemType = {\r\n    addItem:(title: string) => void\r\n}\r\n\r\nconst AddItem = React.memo((props:AddItemType) => {\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim()) {\r\n            props.addItem(title.trim());\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.key === 'Enter') {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <input value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   className={error ? \"error\" : \"\"}\r\n            />\r\n            <button onClick={addItem}>+</button>\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default AddItem;\r\n","import React, {useState, KeyboardEvent, ChangeEvent} from 'react';\r\ntype EditItemType = {\r\n    title: string\r\n    editStateItem: (title:string)=>void\r\n}\r\n\r\nconst EditItem = React.memo ((props:EditItemType) => {\r\n    const [edit, setEdit] = useState(true)\r\n    const [title, setTitle] = useState(props.title)\r\n    let [error, setError] = useState('')\r\n    const onDoubleKlick = ()=>{\r\n        setEdit(!edit)\r\n    }\r\n    const onChangeHandler = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError('')\r\n    }\r\n    const onKeyPress = (e:KeyboardEvent<HTMLInputElement>) => {\r\n        if(e.key === \"Enter\" && title.trim()){\r\n            props.editStateItem(title.trim())\r\n            setEdit(!edit)\r\n        }else{\r\n            setError('value not valid')\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        edit?\r\n        <span onDoubleClick={onDoubleKlick}>{props.title}</span>\r\n           : <input className=\"editItem\"\r\n                value={title}\r\n                    onChange={onChangeHandler}\r\n                    onKeyPress={onKeyPress}\r\n                    placeholder={error}\r\n                    autoFocus\r\n            />\r\n    );\r\n});\r\n\r\nexport default EditItem;\r\n","import {Dispatch} from 'redux';\r\nimport {todolistAPI, TodolistAPIType} from '../api/TodolistAPI';\r\n\r\nexport enum TLActionType {\r\n    GET_TL = 'GET_TL',\r\n    DELETE_TL = 'DELETE_TL',\r\n    SET_FILTER = 'SET_FILTER',\r\n    ADD_TL = 'ADD_TL',\r\n    CHANGETITLE_TL = 'CHANGETITLE_TL',\r\n}\r\n\r\n\r\ntype ActionTLType =\r\n    ReturnType<typeof changeFilterTL_AC>\r\n    | ReturnType<typeof deleteTL_AC>\r\n    | ReturnType<typeof addTodolist_AC>\r\n    | ReturnType<typeof changeTitleTL_AC>\r\n    | ReturnType<typeof getTodolists_AC>\r\n\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodosType =   TodolistAPIType & {\r\n    filter: FilterValuesType\r\n}\r\n\r\nlet initialTL: Array<TodosType> = [\r\n    // {id: todolistId1, title: 'What to learn', filter: 'all'},\r\n    // {id: todolistId2, title: 'What to buy', filter: 'all'}\r\n];\r\n\r\nexport const reducerTL = (state: Array<TodosType> = initialTL, action: ActionTLType): Array<TodosType> => {\r\n    switch (action.type) {\r\n        case TLActionType.GET_TL:\r\n            return action.todolists.map(m => ({...m, filter: 'all'}))\r\n        case TLActionType.ADD_TL:\r\n            return [{...action.todo, filter: 'all'},...state]\r\n        case TLActionType.DELETE_TL:\r\n            return state.filter(f => f.id !== action.id)\r\n        case TLActionType.SET_FILTER:\r\n            return state.map(m => m.id === action.id ? {...m, filter: action.filter} : m)\r\n        case TLActionType.CHANGETITLE_TL:\r\n            return state.map(m => m.id === action.id ? {...m, title: action.title} : m)\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\n// Action creator\r\n\r\nexport const changeFilterTL_AC = (todolistId: string, filter: FilterValuesType) => {\r\n    return {\r\n        type: TLActionType.SET_FILTER,\r\n        id: todolistId,\r\n        filter\r\n    } as const\r\n}\r\nexport const deleteTL_AC = (todolistId: string) => {\r\n    return {\r\n        type: TLActionType.DELETE_TL,\r\n        id: todolistId\r\n    } as const\r\n}\r\nexport const addTodolist_AC = (todo: TodolistAPIType) => {\r\n    return {\r\n        type: TLActionType.ADD_TL,\r\n        todo,\r\n    } as const\r\n}\r\nexport const changeTitleTL_AC = (todolistId: string, title: string) => {\r\n    return {\r\n        type: TLActionType.CHANGETITLE_TL,\r\n        id: todolistId,\r\n        title\r\n    } as const\r\n}\r\nexport const getTodolists_AC = (todolists: TodolistAPIType[]) => {\r\n    return {\r\n        type: TLActionType.GET_TL,\r\n        todolists\r\n    } as const\r\n}\r\n\r\n// Thunk creator\r\n\r\nexport const getTodolistsTC = () => (dispatch: Dispatch) => {\r\n    todolistAPI.getTodolists()\r\n        .then(res => {\r\n            dispatch(getTodolists_AC(res.data))\r\n        })\r\n}\r\nexport const createTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n    todolistAPI.createTodolist(title)\r\n        .then(res => {\r\n            dispatch(addTodolist_AC(res.data.data.item))\r\n        })\r\n}\r\nexport const deleteTodolistTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistAPI.deleteTodolist(todolistId)\r\n        .then(() => {\r\n            dispatch(deleteTL_AC(todolistId))\r\n        })\r\n}\r\nexport const updateTodolistTC = (todolistId: string, title:string) => (dispatch: Dispatch) => {\r\n    todolistAPI.updateTodolist(todolistId, title)\r\n        .then(() => {\r\n            dispatch(changeTitleTL_AC(todolistId, title))\r\n        })\r\n}\r\n\r\n\r\n\r\n","import {initialAPI} from './TaskAPI';\r\n\r\nexport type TodolistAPIType = {\r\n        addedDate: string\r\n        id: string\r\n        order: number\r\n        title: string\r\n}\r\ntype CreateTLType = {\r\n    data:{\r\n        item:TodolistAPIType\r\n    }\r\n}\r\nexport const todolistAPI = {\r\n    getTodolists(){\r\n        return initialAPI.get<TodolistAPIType[]>(`/todo-lists`)\r\n    },\r\n    createTodolist(title:string){\r\n        return initialAPI.post<CreateTLType>(`/todo-lists`, {title})\r\n    },\r\n    updateTodolist(todolistId:string, title:string){\r\n        return initialAPI.put(`/todo-lists/${todolistId}`, {title})\r\n    },\r\n    deleteTodolist(todolistId:string){\r\n        return initialAPI.delete(`/todo-lists/${todolistId}`)\r\n    }\r\n}\r\n","import {addTodolist_AC, deleteTL_AC, getTodolists_AC, TLActionType} from './Todolists_Reducer';\r\nimport {Dispatch} from 'redux';\r\nimport {ModalType, taskAPI, TaskDomainType, UpdateModalType} from '../api/TaskAPI';\r\nimport {rootReducerType} from '../store/store';\r\n\r\nexport enum TaskActionType {\r\n    DELETETASK = 'DELETETASK',\r\n    ADD_TASK = 'ADD_TASK',\r\n    GET_TASKS = 'GET_TASKS',\r\n    UPDATE_TASK = 'UPDATE_TASK'\r\n}\r\n\r\n\r\ntype ActionTasksType =\r\n    ReturnType<typeof deleteTL_AC>\r\n    | ReturnType<typeof addTodolist_AC>\r\n    | ReturnType<typeof deleteTask_AC>\r\n    | ReturnType<typeof addTask_AC>\r\n    | ReturnType<typeof getTodolists_AC>\r\n    | ReturnType<typeof getTasks_AC>\r\n    | ReturnType<typeof updateTask_AC>\r\n\r\n\r\nexport type TasksType = {\r\n    [key: string]: Array<TaskDomainType>\r\n}\r\n\r\nlet initialTasks: TasksType = {\r\n    // [todolistId1]: [\r\n    //     {id: v1(), title: 'HTML', isDone: true},\r\n    //     {id: v1(), title: 'CSS', isDone: true},\r\n    //     {id: v1(), title: 'JS', isDone: false},\r\n    //     {id: v1(), title: 'TS', isDone: false},\r\n    //     {id: v1(), title: 'Java', isDone: false}\r\n    // ],\r\n    // [todolistId2]: [\r\n    //     {id: v1(), title: 'Beer', isDone: true},\r\n    //     {id: v1(), title: 'Fish', isDone: true},\r\n    //     {id: v1(), title: 'Chips', isDone: false},\r\n    //     {id: v1(), title: 'Some milk', isDone: false},\r\n    //     {id: v1(), title: 'Vine', isDone: false}\r\n    // ]\r\n};\r\n\r\nexport const reducerTasks = (state: TasksType = initialTasks, action: ActionTasksType): TasksType => {\r\n    switch (action.type) {\r\n        case TLActionType.GET_TL: {\r\n            let copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case TaskActionType.GET_TASKS:\r\n            return {...state, [action.todolistId]: action.tasks}\r\n\r\n        case TLActionType.DELETE_TL:\r\n            let newTasks = {...state};\r\n            delete newTasks[action.id]\r\n            return newTasks\r\n        case TLActionType.ADD_TL:\r\n            return {...state, [action.todo.id]: []}\r\n        case TaskActionType.DELETETASK:\r\n            return {...state, [action.id]: state[action.id].filter(f => f.id !== action.taskID)}\r\n        case TaskActionType.ADD_TASK:\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case TaskActionType.UPDATE_TASK:\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(m => m.id === action.taskId ? {...m, ...action.model} : m)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// action creator\r\n\r\nexport const deleteTask_AC = (todolistId: string, taskId: string) => {\r\n    return {\r\n        type: TaskActionType.DELETETASK,\r\n        id: todolistId,\r\n        taskID: taskId\r\n    } as const\r\n}\r\nexport const addTask_AC = (task: TaskDomainType) => {\r\n    return {\r\n        type: TaskActionType.ADD_TASK,\r\n        task\r\n    } as const\r\n}\r\n\r\nexport const updateTask_AC = (todolistId:string, taskId:string, model: ModalType) => {\r\n    return {\r\n        type: TaskActionType.UPDATE_TASK,\r\n        model,\r\n        todolistId,\r\n        taskId\r\n    } as const\r\n}\r\n\r\nexport const getTasks_AC = (tasks: Array<TaskDomainType>, todolistId: string) => {\r\n    return {\r\n        type: TaskActionType.GET_TASKS,\r\n        tasks,\r\n        todolistId\r\n    } as const\r\n}\r\n// Thunk creator\r\n\r\nexport const getTasksTC = (todolistId: string) => (dispatch: Dispatch) =>\r\n{\r\n    taskAPI.getTasks(todolistId)\r\n        .then(res => {\r\n            dispatch(getTasks_AC(res.data.items, todolistId))\r\n        })\r\n}\r\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch) =>\r\n{\r\n    taskAPI.createTask(todolistId, title)\r\n        .then((res) => {\r\n            dispatch(addTask_AC(res.data.data.item))\r\n        })\r\n}\r\nexport const updateTaskTC = (todolistId: string, taskId: string, model: ModalType) =>\r\n    (dispatch: Dispatch, getState: () => rootReducerType) => {\r\n    const task = getState().tasks[todolistId].filter(f => f.id === taskId)[0]\r\n\r\n    let apiModel: UpdateModalType = {\r\n        description: task.description,\r\n        status: task.status,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        deadline: task.deadline,\r\n        title: task.title,\r\n        ...model\r\n    }\r\n    taskAPI.updateTask(todolistId, taskId, apiModel)\r\n        .then(() => {\r\n            dispatch(updateTask_AC(todolistId, taskId, model))\r\n        })\r\n}\r\nexport const deleteTaskTC = (todolistId: string, taskId: string) => (dispatch: Dispatch) =>\r\n{\r\n    taskAPI.deleteTask(todolistId, taskId)\r\n        .then(() => {\r\n            dispatch(deleteTask_AC(todolistId, taskId))\r\n        })\r\n}\r\n","import React, {ChangeEvent, useEffect} from 'react';\r\nimport AddItem from './components/AddItem';\r\nimport EditItem from './components/EditItem';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {rootReducerType} from './store/store';\r\nimport {changeFilterTL_AC, deleteTodolistTC, TodosType, updateTodolistTC} from './reducers/Todolists_Reducer';\r\nimport {addTaskTC, deleteTaskTC, getTasksTC, TasksType, updateTaskTC,} from './reducers/Tasks_Reducer';\r\nimport {TaskStatuses} from './api/TaskAPI';\r\n\r\n\r\ntype PropsType = {\r\n    todolistId: string\r\n}\r\n\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n    let tasks = useSelector<rootReducerType, TasksType>(state => state.tasks)\r\n    let todolist = useSelector<rootReducerType, TodosType>(state => state.todolists.filter(f => f.id === props.todolistId)[0])\r\n    let dispatch = useDispatch();\r\n\r\n\r\n    const onAllClickHandler = () => dispatch(changeFilterTL_AC(props.todolistId, 'all'));\r\n    const onActiveClickHandler = () => dispatch(changeFilterTL_AC(props.todolistId, 'active'));\r\n    const onCompletedClickHandler = () => dispatch(changeFilterTL_AC(props.todolistId, 'completed'));\r\n    const addItem = (title: string) => {\r\n        dispatch(addTaskTC(props.todolistId, title))\r\n    }\r\n    const editTL = (title: string) => {\r\n        dispatch(updateTodolistTC(props.todolistId, title))\r\n    }\r\n    let tasksForTodolist = tasks[props.todolistId];\r\n\r\n    if (todolist.filter === 'active') {\r\n        tasksForTodolist = tasksForTodolist.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (todolist.filter === 'completed') {\r\n        tasksForTodolist = tasksForTodolist.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    const deleteTodo = () => {\r\n        dispatch(deleteTodolistTC(props.todolistId))\r\n    }\r\n    useEffect(() => {\r\n        dispatch(getTasksTC(props.todolistId))\r\n    }, [])\r\n\r\n    return <div>\r\n        <h3><EditItem title={todolist.title} editStateItem={editTL}/>\r\n            <button onClick={deleteTodo}>deleteTL</button>\r\n        </h3>\r\n        <AddItem addItem={addItem}/>\r\n        <ul>\r\n            {\r\n                tasksForTodolist.map(t => {\r\n                    const onClickHandler = () => dispatch(deleteTaskTC(props.todolistId, t.id))\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        const status = e.currentTarget.checked? TaskStatuses.Completed: TaskStatuses.New\r\n                        dispatch(updateTaskTC(props.todolistId, t.id, {status}))\r\n                    }\r\n                    const editTask = (title: string) => {\r\n                        dispatch(updateTaskTC(props.todolistId, t.id, {title}))\r\n                    }\r\n                    return <li key={t.id} className={t.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n                        <input type=\"checkbox\"\r\n                               onChange={onChangeHandler}\r\n                               checked={t.status > 0}/>\r\n                        <EditItem title={t.title} editStateItem={editTask}/>\r\n                        <button onClick={onClickHandler}>x</button>\r\n                    </li>\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <button className={todolist.filter === 'all' ? 'active-filter' : ''}\r\n                    onClick={onAllClickHandler}>All\r\n            </button>\r\n            <button className={todolist.filter === 'active' ? 'active-filter' : ''}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </button>\r\n            <button className={todolist.filter === 'completed' ? 'active-filter' : ''}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport AddItem from './components/AddItem';\r\nimport {createTodolistTC, getTodolistsTC, TodosType} from './reducers/Todolists_Reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {rootReducerType} from './store/store';\r\n\r\n\r\nfunction App() {\r\n\r\n    let dispatch = useDispatch();\r\n    let todolists = useSelector<rootReducerType, Array<TodosType>>(state =>state.todolists)\r\n\r\n    const addTodolist = useCallback((title: string)=> {\r\n        // dispatch(addTodolist_AC(title))\r\n        dispatch(createTodolistTC(title))\r\n    },[dispatch])\r\n\r\n    useEffect(()=>{\r\n        dispatch(getTodolistsTC())\r\n    },[])\r\n\r\n    return (\r\n\r\n        <div className=\"App\">\r\n            <AddItem addItem={addTodolist}/>\r\n            {\r\n                todolists.map(tl => {\r\n                    return (\r\n                        <Todolist\r\n                            key={tl.id}\r\n                            todolistId={tl.id}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {reducerTasks} from '../reducers/Tasks_Reducer';\r\nimport {reducerTL} from '../reducers/Todolists_Reducer';\r\nimport thunk from 'redux-thunk';\r\n\r\nlet stateFromLS;\r\nlet stateString = localStorage.getItem('state')\r\nif(stateString){\r\n    stateFromLS = JSON.parse(stateString)\r\n}\r\n\r\nlet rootReducer = combineReducers({\r\n    tasks: reducerTasks,\r\n    todolists: reducerTL\r\n})\r\n\r\n\r\nexport type rootReducerType = ReturnType<typeof rootReducer>;\r\nexport let store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\n// store.subscribe(() => {\r\n//     localStorage.setItem('state', JSON.stringify(store.getState()))\r\n// })\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './store/store';\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n    <App/>\r\n</Provider>,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}