{"version":3,"sources":["components/AddItem.tsx","components/EditItem.tsx","reducers/Todolists_Reducer.ts","reducers/Tasks_Reducer.ts","Todolist.tsx","App.tsx","serviceWorker.ts","store/store.ts","index.tsx"],"names":["AddItem","React","memo","props","useState","title","setTitle","error","setError","addItem","trim","value","onChange","e","currentTarget","onKeyPress","charCode","className","onClick","EditItem","edit","setEdit","onDoubleClick","key","editStateItem","placeholder","DELETE_TL","SET_FILTER","ADD_TL","CHANGETITLE_TL","todolistId1","v1","todolistId2","initialTL","id","filter","changeFilterTL_AC","todolistId","type","DELETETASK","ADD_TASK","CHANGECHECKED","CHANGETITLETASK","initialTasks","isDone","Todolist","tasks","useSelector","state","todolist","todolists","f","dispatch","useDispatch","tasksForTodolist","t","changeTitleTL_AC","addTask_AC","map","taskId","checked","taskID","payload","changeTitleTask_AC","App","addTodolist","useCallback","addTodolist_AC","tl","Boolean","window","location","hostname","match","stateFromLS","stateString","localStorage","getItem","JSON","parse","rootReducer","combineReducers","action","newTasks","newTask","m","newTL","store","createStore","subscribe","setItem","stringify","getState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.1eae7c4c.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\ntype AddItemType = {\r\n    addItem:(title: string) => void\r\n}\r\n\r\nconst AddItem = React.memo((props:AddItemType) => {\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim()) {\r\n            props.addItem(title.trim());\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <input value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   className={error ? \"error\" : \"\"}\r\n            />\r\n            <button onClick={addItem}>+</button>\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default AddItem;","import React, {useState, KeyboardEvent, ChangeEvent} from 'react';\r\ntype EditItemType = {\r\n    title: string\r\n    editStateItem: (title:string)=>void\r\n}\r\n\r\nconst EditItem = React.memo ((props:EditItemType) => {\r\n    const [edit, setEdit] = useState(true)\r\n    const [title, setTitle] = useState(props.title)\r\n    let [error, setError] = useState('')\r\n    const onDoubleKlick = ()=>{\r\n        setEdit(!edit)\r\n    }\r\n    const onChangeHandler = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError('')\r\n    }\r\n    const onKeyPress = (e:KeyboardEvent<HTMLInputElement>) => {\r\n        if(e.key === \"Enter\" && title.trim()){\r\n            props.editStateItem(title.trim())\r\n            setEdit(!edit)\r\n        }else{\r\n            setError('value not valid')\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        edit?\r\n        <span onDoubleClick={onDoubleKlick}>{props.title}</span>\r\n           : <input className=\"editItem\"\r\n                value={title}\r\n                    onChange={onChangeHandler}\r\n                    onKeyPress={onKeyPress}\r\n                    placeholder={error}\r\n            />\r\n    );\r\n});\r\n\r\nexport default EditItem;","import {FilterValuesType, TodolistType} from '../App';\r\nimport {v1} from 'uuid';\r\n\r\nexport const DELETE_TL = 'DELETE_TL'\r\nconst SET_FILTER = 'SET_FILTER'\r\nexport const ADD_TL = 'ADD_TL'\r\nconst CHANGETITLE_TL = 'CHANGETITLE_TL'\r\n\r\n\r\n\r\ntype ActionTLType =\r\n    ReturnType<typeof changeFilterTL_AC> | ReturnType<typeof deleteTL_AC> | ReturnType<typeof addTodolist_AC> | ReturnType<typeof changeTitleTL_AC>\r\n\r\n\r\nexport let todolistId1 = v1();\r\nexport let todolistId2 = v1();\r\n\r\nlet initialTL:Array<TodolistType> =  [\r\n    {id: todolistId1, title: 'What to learn', filter: 'all'},\r\n    {id: todolistId2, title: 'What to buy', filter: 'all'}\r\n];\r\n\r\nexport const reducerTL = (state:Array<TodolistType> = initialTL, action: ActionTLType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case SET_FILTER:\r\n            return state.map(m => m.id === action.id ? {...m, filter: action.filter} : m)\r\n        case DELETE_TL:\r\n            return state.filter(f => f.id !== action.id)\r\n        case ADD_TL:\r\n            let newTL:TodolistType = {id: action.id, title: action.title, filter: 'all'}\r\n            return [...state, newTL]\r\n        case CHANGETITLE_TL:\r\n            return state.map(m => m.id === action.id ? {...m, title: action.title} : m)\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n    export const changeFilterTL_AC = (todolistId: string, filter: FilterValuesType) => {\r\n        return {\r\n            type: SET_FILTER,\r\n            id: todolistId,\r\n            filter\r\n        } as const\r\n    }\r\n    export const deleteTL_AC = (todolistId: string) => {\r\n        return {\r\n            type: DELETE_TL,\r\n            id: todolistId\r\n        } as const\r\n    }\r\n    export const addTodolist_AC = (title:string) => {\r\n        return {\r\n            type: ADD_TL,\r\n            id: v1(),\r\n            title,\r\n        } as const\r\n    }\r\n    export const changeTitleTL_AC = (todolistId: string, title: string) => {\r\n        return {\r\n            type: CHANGETITLE_TL,\r\n            id: todolistId,\r\n            title\r\n        } as const\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {addTodolist_AC, DELETE_TL, ADD_TL, deleteTL_AC, todolistId1, todolistId2} from './Todolists_Reducer';\r\nimport {v1} from 'uuid';\r\nimport {TasksType} from '../App';\r\n\r\n\r\nconst DELETETASK = 'DELETETASK'\r\nconst ADD_TASK = 'ADD_TASK'\r\nconst CHANGECHECKED = 'CHANGECHECKED'\r\nconst CHANGETITLETASK = 'CHANGETITLETASK'\r\n\r\ntype ActionTasksType =\r\n    ReturnType<typeof deleteTL_AC>\r\n    | ReturnType<typeof addTodolist_AC>\r\n    | ReturnType<typeof deleteTask_AC>\r\n    | ReturnType<typeof addTask_AC>\r\n    | ReturnType<typeof changeChecked_AC>\r\n    | ReturnType<typeof changeTitleTask_AC>\r\n\r\n\r\nlet initialTasks:TasksType = {\r\n    [todolistId1]: [\r\n        {id: v1(), title: 'HTML', isDone: true},\r\n        {id: v1(), title: 'CSS', isDone: true},\r\n        {id: v1(), title: 'JS', isDone: false},\r\n        {id: v1(), title: 'TS', isDone: false},\r\n        {id: v1(), title: 'Java', isDone: false}\r\n    ],\r\n    [todolistId2]: [\r\n        {id: v1(), title: 'Beer', isDone: true},\r\n        {id: v1(), title: 'Fish', isDone: true},\r\n        {id: v1(), title: 'Chips', isDone: false},\r\n        {id: v1(), title: 'Some milk', isDone: false},\r\n        {id: v1(), title: 'Vine', isDone: false}\r\n    ]\r\n};\r\n\r\nexport const reducerTasks = (state:TasksType = initialTasks, action: ActionTasksType): TasksType => {\r\n    switch (action.type) {\r\n        case DELETE_TL:\r\n            let newTasks = {...state};\r\n            delete newTasks[action.id]\r\n            return newTasks\r\n        case ADD_TL:\r\n            return {...state, [action.id]: []}\r\n        case DELETETASK:\r\n            return {...state, [action.id]: state[action.id].filter(f => f.id !== action.taskID)}\r\n        case ADD_TASK:\r\n            let newTask = {id: v1(), title: action.title, isDone: false};\r\n            return {...state, [action.id]: [newTask, ...state[action.id]]}\r\n        case CHANGECHECKED:\r\n            return {\r\n                ...state,\r\n                [action.id]: state[action.id].map(m => m.id === action.taskID ? {...m, isDone: action.isDone} : m)\r\n            }\r\n        case CHANGETITLETASK:\r\n            return {...state,\r\n                [action.payload.id]: state[action.payload.id].map(m => m.id === action.payload.taskID ? {\r\n                    ...m,\r\n                    title: action.payload.title\r\n                } : m)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const deleteTask_AC = (todolistId: string, taskId: string) => {\r\n    return {\r\n        type: DELETETASK,\r\n        id: todolistId,\r\n        taskID: taskId\r\n    } as const\r\n}\r\nexport const addTask_AC = (todolistId: string, title: string) => {\r\n    return {\r\n        type: ADD_TASK,\r\n        id: todolistId,\r\n        title\r\n    } as const\r\n}\r\nexport const changeChecked_AC = (todolistId: string, taskId: string, isDone: boolean) => {\r\n    return {\r\n        type: CHANGECHECKED,\r\n        id: todolistId,\r\n        taskID: taskId,\r\n        isDone\r\n    } as const\r\n}\r\nexport const changeTitleTask_AC = (todolistId: string, taskId: string, title: string) => {\r\n    return {\r\n        type: CHANGETITLETASK,\r\n        payload: {\r\n            id: todolistId,\r\n            taskID: taskId,\r\n            title\r\n        }\r\n\r\n    } as const\r\n}\r\n","import React, {ChangeEvent} from 'react';\r\nimport {TasksType, TodolistType} from './App';\r\nimport AddItem from './components/AddItem';\r\nimport EditItem from './components/EditItem';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {rootReducerType} from './store/store';\r\nimport {changeFilterTL_AC, changeTitleTL_AC, deleteTL_AC} from './reducers/Todolists_Reducer';\r\nimport {addTask_AC, changeChecked_AC, changeTitleTask_AC, deleteTask_AC} from './reducers/Tasks_Reducer';\r\n\r\n\r\n\r\ntype PropsType = {\r\n    todolistId: string\r\n}\r\n\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n    let tasks = useSelector<rootReducerType, TasksType>(state => state.tasks)\r\n    let todolist = useSelector<rootReducerType, TodolistType>(state => state.todolists.filter(f=>f.id === props.todolistId)[0])\r\n    let dispatch = useDispatch();\r\n\r\n\r\n    const onAllClickHandler = () =>   dispatch(changeFilterTL_AC(props.todolistId, 'all'));\r\n    const onActiveClickHandler = () => dispatch(changeFilterTL_AC(props.todolistId, 'active'));\r\n    const onCompletedClickHandler = () => dispatch(changeFilterTL_AC(props.todolistId, 'completed'));\r\n    const addItem = (title: string) => {\r\n        dispatch(addTask_AC(props.todolistId, title))\r\n    }\r\n    const editTL = (title: string) => {\r\n        dispatch(changeTitleTL_AC(props.todolistId, title))\r\n    }\r\n    let tasksForTodolist = tasks[props.todolistId];\r\n\r\n    if (todolist.filter === 'active') {\r\n        tasksForTodolist = tasksForTodolist.filter(t => !t.isDone);\r\n    }\r\n    if (todolist.filter === 'completed') {\r\n        tasksForTodolist = tasksForTodolist.filter(t => t.isDone);\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditItem title={todolist.title} editStateItem={editTL}/>\r\n            <button onClick={() =>  dispatch(deleteTL_AC(props.todolistId))}>deleteTL</button>\r\n        </h3>\r\n        <AddItem addItem={addItem}/>\r\n        <ul>\r\n            {\r\n                tasksForTodolist.map(t => {\r\n                    const onClickHandler = () =>  dispatch(deleteTask_AC(props.todolistId, t.id))\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        dispatch(changeChecked_AC(props.todolistId, t.id, e.currentTarget.checked))\r\n                    }\r\n                    const editTask = (title: string) => {\r\n                        dispatch(changeTitleTask_AC(props.todolistId, t.id, title))\r\n                    }\r\n                    return <li key={t.id} className={t.isDone ? 'is-done' : ''}>\r\n                        <input type=\"checkbox\"\r\n                               onChange={onChangeHandler}\r\n                               checked={t.isDone}/>\r\n                        <EditItem title={t.title} editStateItem={editTask}/>\r\n                        <button onClick={onClickHandler}>x</button>\r\n                    </li>\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <button className={todolist.filter === 'all' ? 'active-filter' : ''}\r\n                    onClick={onAllClickHandler}>All\r\n            </button>\r\n            <button className={todolist.filter === 'active' ? 'active-filter' : ''}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </button>\r\n            <button className={todolist.filter === 'completed' ? 'active-filter' : ''}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport AddItem from './components/AddItem';\r\nimport {addTodolist_AC,} from './reducers/Todolists_Reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {rootReducerType} from './store/store';\r\n\r\nexport type TasksType = {\r\n    [key: string]: Array<{ id: string, title: string, isDone: boolean }>\r\n}\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n    let dispatch = useDispatch();\r\n    let todolists = useSelector<rootReducerType, Array<TodolistType>>(state =>state.todolists)\r\n\r\n    const addTodolist = useCallback((title: string)=> {\r\n        dispatch(addTodolist_AC(title))\r\n    },[dispatch])\r\n\r\n    return (\r\n\r\n        <div className=\"App\">\r\n            <AddItem addItem={addTodolist}/>\r\n            {\r\n                todolists.map(tl => {\r\n                    return (\r\n                        <Todolist\r\n                            key={tl.id}\r\n                            todolistId={tl.id}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, createStore} from 'redux';\r\nimport {reducerTasks} from '../reducers/Tasks_Reducer';\r\nimport {reducerTL} from '../reducers/Todolists_Reducer';\r\n\r\nlet stateFromLS;\r\nlet stateString = localStorage.getItem('state')\r\nif(stateString){\r\n    stateFromLS = JSON.parse(stateString)\r\n}\r\n\r\nlet rootReducer = combineReducers({\r\n    tasks: reducerTasks,\r\n    todolists: reducerTL\r\n})\r\n\r\n\r\nexport type rootReducerType = ReturnType<typeof rootReducer>;\r\nexport let store = createStore(rootReducer, stateFromLS)\r\n\r\nstore.subscribe(() => {\r\n    localStorage.setItem('state', JSON.stringify(store.getState()))\r\n})\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './store/store';\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n    <App/>\r\n</Provider>,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}