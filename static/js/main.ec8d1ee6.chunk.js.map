{"version":3,"sources":["api/TaskAPI.ts","components/AddItem.tsx","components/EditItem.tsx","reducers/App-reducer.ts","api/TodolistAPI.ts","reducers/Tasks_Reducer.ts","reducers/Todolists_Reducer.ts","utils/error-utils.ts","Tasks.tsx","Todolist.tsx","components/ErrorSnackbar.tsx","App.tsx","serviceWorker.ts","store/store.ts","index.tsx"],"names":["TaskStatuses","AddItem","React","memo","props","useState","title","setTitle","error","setError","addItem","trim","TextField","value","variant","onChange","e","currentTarget","onKeyPress","key","label","helperText","disabled","IconButton","color","onClick","AddBox","EditItem","edit","setEdit","entityStatus","onDoubleClick","className","editStateItem","placeholder","autoFocus","initialAPI","axios","create","baseURL","withCredentials","headers","AppActionType","taskAPI","todolistId","get","post","taskId","modalTask","put","delete","todolistAPI","TaskActionType","initialState","status","setAppStatusAC","type","SET_STATUS","payload","setAppErrorAC","SET_ERROR","TLActionType","initialTasks","changeTaskEntityStatusAC","CHANGE_TASK_ENTITY_STATUS","getTasksTC","dispatch","handleServerTodolistResponse","then","res","tasks","GET_TASKS","getTasks_AC","data","items","catch","handleServerNetworkError","changeTodolistEntityStatusAC","addTaskTC","task","resultCode","item","ADD_TASK","messages","updateTaskTC","model","getState","filter","f","id","apiModel","description","priority","startDate","deadline","handleServerTaskResponse","UPDATE_TASK","updateTask_AC","deleteTaskTC","DELETETASK","taskID","deleteTask_AC","message","initialTL","changeFilterTL_AC","SET_FILTER","CHANGE_TODOLIST_ENTITY_STATUS","getTodolistsTC","todolists","todoWithFilter","map","m","localStorage","getItem","GET_TL","createTodolistTC","todo","ADD_TL","deleteTodolistTC","DELETE_TL","deleteTL_AC","updateTodolistTC","CHANGETITLE_TL","changeTitleTL_AC","Tasks","useDispatch","Completed","Checkbox","checked","New","todoListId","CircularProgress","disableShrink","size","Delete","Todolist","useSelector","state","todolist","todolistEntityStatus","tasksForTodolist","t","useEffect","Button","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","App","addTodolist","useCallback","setItem","saveFilterToLocalStorage","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","style","Container","fixed","Grid","container","padding","spacing","tl","Paper","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","copyState","forEach","newTasks","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.ec8d1ee6.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport const initialAPI = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1',\r\n    withCredentials: true,\r\n    headers:{\r\n        'api-key': 'b9ab541c-e0c5-4e3f-a6cb-7e9f4deadb80'\r\n    }\r\n})\r\n\r\nexport type ModalType = {\r\n    title?: string\r\n    status?: TaskStatuses\r\n}\r\n\r\nexport type UpdateModalType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport type TaskDomainType = {\r\n    addedDate: string\r\n    deadline: string\r\n    description: string\r\n    id: string\r\n    order: number\r\n    priority: number\r\n    startDate: string\r\n    status: TaskStatuses\r\n    title: string\r\n    todoListId: string\r\n\r\n\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport type TasksAPIType = {\r\n    items: Array<TaskDomainType>\r\n}\r\ntype CreateTaskType = {\r\n    data:{\r\n        item:TaskDomainType\r\n    }\r\n    resultCode: number\r\n    messages: string[]\r\n}\r\nexport const taskAPI = {\r\n    getTasks(todolistId:string){\r\n       return initialAPI.get<TasksAPIType>(`/todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId:string, title:string){\r\n       return initialAPI.post<CreateTaskType>(`/todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    updateTask(todolistId:string, taskId:string, modalTask: UpdateModalType){\r\n       return initialAPI.put<CreateTaskType>(`/todo-lists/${todolistId}/tasks/${taskId}`, modalTask)\r\n    },\r\n    deleteTask(todolistId:string, taskId:string){\r\n       return initialAPI.delete(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    }\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {AddBox} from '@mui/icons-material';\r\nimport {IconButton, TextField} from '@mui/material';\r\n\r\ntype AddItemType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nconst AddItem = React.memo((props: AddItemType) => {\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim()) {\r\n            props.addItem(title.trim());\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.key === 'Enter') {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <TextField value={title}\r\n                       variant={'outlined'}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       error={!!error}\r\n                       label={'Title'}\r\n                       helperText={error}\r\n                       disabled={props.disabled}\r\n            />\r\n            <IconButton color={'primary'} onClick={addItem}  disabled={props.disabled}>\r\n                <AddBox/>\r\n            </IconButton>\r\n            {/*{error && <div className=\"error-message\">{error}</div>}*/}\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default AddItem;\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {TextField} from '@mui/material';\r\nimport {RequestStatusType} from '../reducers/App-reducer';\r\n\r\ntype EditItemType = {\r\n    title: string\r\n    editStateItem: (title: string) => void\r\n    entityStatus?: RequestStatusType\r\n}\r\n\r\nconst EditItem = React.memo((props: EditItemType) => {\r\n    const [edit, setEdit] = useState(true)\r\n    const [title, setTitle] = useState(props.title)\r\n    let [error, setError] = useState('')\r\n    const onDoubleClick = () => {\r\n        if (props.entityStatus === 'loading') {\r\n            return\r\n        }\r\n        setEdit(!edit)\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError('')\r\n    }\r\n    const onKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter' && title.trim()) {\r\n            props.editStateItem(title.trim())\r\n            setEdit(!edit)\r\n        } else {\r\n            setError('value not valid')\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        edit || props.entityStatus === 'loading' ?\r\n            <span onDoubleClick={onDoubleClick}>\r\n                {\r\n                    props.entityStatus === 'loading'\r\n                        ?\r\n                        'loading...'\r\n                        :\r\n                        props.title\r\n                }\r\n            </span>\r\n            : <TextField className=\"editItem\"\r\n                         variant={'outlined'}\r\n                         value={title}\r\n                         onChange={onChangeHandler}\r\n                         onKeyPress={onKeyPress}\r\n                         placeholder={error}\r\n                         autoFocus\r\n            />\r\n    );\r\n});\r\n\r\nexport default EditItem;\r\n","export type RequestStatusType =\r\n    'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\n\r\nenum AppActionType  {\r\n    SET_STATUS = 'SET_STATUS',\r\n    SET_ERROR = 'SET_ERROR'\r\n}\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as null | string\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case AppActionType.SET_STATUS:\r\n        case AppActionType.SET_ERROR:\r\n            return {\r\n                ...state,\r\n                 ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType)=>{\r\n    return{\r\n        type: AppActionType.SET_STATUS,\r\n        payload:{\r\n            status\r\n        }\r\n    }\r\n}\r\n\r\nexport const setAppErrorAC = (error: null | string)=>{\r\n    return{\r\n        type: AppActionType.SET_ERROR,\r\n        payload:{\r\n            error\r\n        }\r\n    }\r\n}\r\nexport type AppStatusType = ReturnType<typeof setAppStatusAC>\r\nexport type AppErrorType = ReturnType<typeof setAppErrorAC>\r\ntype ActionsType = AppStatusType | AppErrorType\r\n","import {initialAPI} from './TaskAPI';\r\n\r\nexport type TodolistAPIType = {\r\n        addedDate: string\r\n        id: string\r\n        order: number\r\n        title: string\r\n}\r\ntype CreateTLType = {\r\n    data:{\r\n        item:TodolistAPIType\r\n    }\r\n    resultCode: number\r\n    messages: string[]\r\n}\r\nexport const todolistAPI = {\r\n    getTodolists(){\r\n        return initialAPI.get<TodolistAPIType[]>(`/todo-lists`)\r\n    },\r\n    createTodolist(title:string){\r\n        return initialAPI.post<CreateTLType>(`/todo-lists`, {title})\r\n    },\r\n    updateTodolist(todolistId:string, title:string){\r\n        return initialAPI.put(`/todo-lists/${todolistId}`, {title})\r\n    },\r\n    deleteTodolist(todolistId:string){\r\n        return initialAPI.delete(`/todo-lists/${todolistId}`)\r\n    }\r\n}\r\n","import {\r\n    addTodolist_AC,\r\n    changeTodolistEntityStatusAC,\r\n    deleteTL_AC,\r\n    getTodolists_AC,\r\n    TLActionType\r\n} from './Todolists_Reducer';\r\nimport {Dispatch} from 'redux';\r\nimport {ModalType, taskAPI, TaskDomainType, UpdateModalType} from '../api/TaskAPI';\r\nimport {rootReducerType} from '../store/store';\r\nimport {RequestStatusType, setAppErrorAC} from './App-reducer';\r\nimport {AxiosError} from 'axios';\r\nimport {handleServerNetworkError, handleServerTaskResponse, handleServerTodolistResponse} from '../utils/error-utils';\r\n\r\nexport enum TaskActionType {\r\n    DELETETASK = 'DELETETASK',\r\n    ADD_TASK = 'ADD_TASK',\r\n    GET_TASKS = 'GET_TASKS',\r\n    UPDATE_TASK = 'UPDATE_TASK',\r\n    CHANGE_TASK_ENTITY_STATUS = 'CHANGE_TASK_ENTITY_STATUS'\r\n}\r\n\r\nexport type ChangeTaskEntityStatusType = ReturnType<typeof changeTaskEntityStatusAC>\r\ntype ActionTasksType =\r\n    ReturnType<typeof deleteTL_AC>\r\n    | ReturnType<typeof addTodolist_AC>\r\n    | ReturnType<typeof deleteTask_AC>\r\n    | ReturnType<typeof addTask_AC>\r\n    | ReturnType<typeof getTodolists_AC>\r\n    | ReturnType<typeof getTasks_AC>\r\n    | ReturnType<typeof updateTask_AC>\r\n    | ChangeTaskEntityStatusType\r\n\r\nexport type TasksType = {\r\n    [key: string]: Array<TaskDomainType & {\r\n        entityStatus: RequestStatusType\r\n    }>\r\n}\r\n\r\nlet initialTasks: TasksType = {\r\n    // [todolistId1]: [\r\n    //     {id: v1(), title: 'HTML', isDone: true},\r\n    //     {id: v1(), title: 'CSS', isDone: true},\r\n    //     {id: v1(), title: 'JS', isDone: false},\r\n    //     {id: v1(), title: 'TS', isDone: false},\r\n    //     {id: v1(), title: 'Java', isDone: false}\r\n    // ],\r\n    // [todolistId2]: [\r\n    //     {id: v1(), title: 'Beer', isDone: true},\r\n    //     {id: v1(), title: 'Fish', isDone: true},\r\n    //     {id: v1(), title: 'Chips', isDone: false},\r\n    //     {id: v1(), title: 'Some milk', isDone: false},\r\n    //     {id: v1(), title: 'Vine', isDone: false}\r\n    // ]\r\n};\r\n\r\nexport const reducerTasks = (state: TasksType = initialTasks, action: ActionTasksType): TasksType => {\r\n    switch (action.type) {\r\n        case TLActionType.GET_TL: {\r\n            let copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case TaskActionType.GET_TASKS:\r\n            return {...state, [action.todolistId]: action.tasks.map(m => ({...m, entityStatus: 'idle'}))}\r\n\r\n        case TLActionType.DELETE_TL:\r\n            let newTasks = {...state};\r\n            delete newTasks[action.id]\r\n            return newTasks\r\n        case TLActionType.ADD_TL:\r\n            return {...state, [action.todo.id]: []}\r\n        case TaskActionType.DELETETASK:\r\n            return {...state, [action.id]: state[action.id].filter(f => f.id !== action.taskID)}\r\n        case TaskActionType.ADD_TASK:\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: [{...action.task, entityStatus: 'idle'}, ...state[action.task.todoListId]]\r\n            }\r\n        case TaskActionType.UPDATE_TASK:\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(m => m.id === action.taskId ? {...m, ...action.model} : m)\r\n            }\r\n        case TaskActionType.CHANGE_TASK_ENTITY_STATUS:\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(m => m.id === action.taskId ? {...m, entityStatus: action.entityStatus} : m)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// action creator\r\n\r\nexport const deleteTask_AC = (todolistId: string, taskId: string) => {\r\n    return {\r\n        type: TaskActionType.DELETETASK,\r\n        id: todolistId,\r\n        taskID: taskId\r\n    } as const\r\n}\r\nexport const addTask_AC = (task: TaskDomainType) => {\r\n    return {\r\n        type: TaskActionType.ADD_TASK,\r\n        task\r\n    } as const\r\n}\r\n\r\nexport const updateTask_AC = (todolistId: string, taskId: string, model: ModalType) => {\r\n    return {\r\n        type: TaskActionType.UPDATE_TASK,\r\n        model,\r\n        todolistId,\r\n        taskId\r\n    } as const\r\n}\r\n\r\nexport const getTasks_AC = (tasks: Array<TaskDomainType>, todolistId: string) => {\r\n    return {\r\n        type: TaskActionType.GET_TASKS,\r\n        tasks,\r\n        todolistId\r\n    } as const\r\n}\r\nexport const changeTaskEntityStatusAC = (todolistId: string, entityStatus: RequestStatusType, taskId: string) => {\r\n    return {\r\n        type: TaskActionType.CHANGE_TASK_ENTITY_STATUS,\r\n        entityStatus,\r\n        todolistId,\r\n        taskId\r\n    } as const\r\n}\r\n// Thunk creator\r\n\r\nexport const getTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    handleServerTodolistResponse(todolistId, 'loading', dispatch)\r\n    taskAPI.getTasks(todolistId)\r\n        .then(res => {\r\n            dispatch(getTasks_AC(res.data.items, todolistId))\r\n            handleServerTodolistResponse(todolistId, 'succeeded', dispatch)\r\n        }).catch((error:AxiosError)=>{\r\n        handleServerNetworkError(error, dispatch)\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'failed'))\r\n    })\r\n}\r\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n    handleServerTodolistResponse(todolistId, 'loading', dispatch)\r\n    taskAPI.createTask(todolistId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTask_AC(res.data.data.item))\r\n                handleServerTodolistResponse(todolistId, 'succeeded', dispatch)\r\n            } else {\r\n                dispatch(setAppErrorAC(res.data.messages[0]))\r\n                handleServerTodolistResponse(todolistId, 'failed', dispatch)\r\n            }\r\n\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(error, dispatch)\r\n            dispatch(changeTodolistEntityStatusAC(todolistId, 'failed'))\r\n        })\r\n\r\n\r\n}\r\nexport const updateTaskTC = (todolistId: string, taskId: string, model: ModalType) =>\r\n    (dispatch: Dispatch, getState: () => rootReducerType) => {\r\n        const task = getState().tasks[todolistId].filter(f => f.id === taskId)[0]\r\n\r\n        let apiModel: UpdateModalType = {\r\n            description: task.description,\r\n            status: task.status,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            deadline: task.deadline,\r\n            title: task.title,\r\n            ...model\r\n        }\r\n        handleServerTaskResponse(todolistId, taskId, 'loading', dispatch)\r\n        taskAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updateTask_AC(todolistId, taskId, model))\r\n                    handleServerTaskResponse(todolistId, taskId, 'succeeded', dispatch)\r\n                }else{\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                    handleServerTaskResponse(todolistId, taskId, 'failed', dispatch)\r\n                }\r\n            })\r\n            .catch((error: AxiosError) => {\r\n                handleServerNetworkError(error, dispatch)\r\n                dispatch(changeTaskEntityStatusAC(todolistId, 'failed', taskId))\r\n            })\r\n    }\r\nexport const deleteTaskTC = (todolistId: string, taskId: string) => (dispatch: Dispatch) => {\r\n    handleServerTaskResponse(todolistId, taskId, 'loading', dispatch)\r\n    taskAPI.deleteTask(todolistId, taskId)\r\n        .then(() => {\r\n            dispatch(deleteTask_AC(todolistId, taskId))\r\n            handleServerTaskResponse(todolistId, taskId, 'succeeded', dispatch)\r\n        })\r\n        .catch((error: AxiosError)=>{\r\n            handleServerNetworkError(error, dispatch)\r\n            dispatch(changeTaskEntityStatusAC(todolistId, 'failed', taskId))\r\n        })\r\n}\r\n","import {Dispatch} from 'redux';\r\nimport {todolistAPI, TodolistAPIType} from '../api/TodolistAPI';\r\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from './App-reducer';\r\nimport {AxiosError} from 'axios';\r\nimport {getFilter, handleServerNetworkError, handleServerTodolistResponse} from '../utils/error-utils';\r\n\r\nexport enum TLActionType {\r\n    GET_TL = 'GET_TL',\r\n    DELETE_TL = 'DELETE_TL',\r\n    SET_FILTER = 'SET_FILTER',\r\n    ADD_TL = 'ADD_TL',\r\n    CHANGETITLE_TL = 'CHANGETITLE_TL',\r\n    CHANGE_TODOLIST_ENTITY_STATUS = 'CHANGE_TODOLIST_ENTITY_STATUS'\r\n}\r\n\r\nexport type ChangeTodolistEntityStatusType = ReturnType<typeof changeTodolistEntityStatusAC>\r\ntype ActionTLType =\r\n    ReturnType<typeof changeFilterTL_AC>\r\n    | ReturnType<typeof deleteTL_AC>\r\n    | ReturnType<typeof addTodolist_AC>\r\n    | ReturnType<typeof changeTitleTL_AC>\r\n    | ReturnType<typeof getTodolists_AC>\r\n    | ChangeTodolistEntityStatusType\r\n\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodosType = TodolistAPIType & {\r\n    filter: FilterValuesType,\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nlet initialTL: Array<TodosType> = [\r\n    // {id: todolistId1, title: 'What to learn', filter: 'all'},\r\n    // {id: todolistId2, title: 'What to buy', filter: 'all'}\r\n];\r\n\r\nexport const reducerTL = (state: Array<TodosType> = initialTL, action: ActionTLType): Array<TodosType> => {\r\n    switch (action.type) {\r\n        case TLActionType.GET_TL:\r\n            // return action.todolists.map(m => ({...m, filter: localStorage.getItem(m.id) as FilterValuesType || 'all', entityStatus: 'idle'}))\r\n            return action.todolists\r\n        case TLActionType.ADD_TL:\r\n            return [{...action.todo, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case TLActionType.DELETE_TL:\r\n            return state.filter(f => f.id !== action.id)\r\n        case TLActionType.SET_FILTER:\r\n            return state.map(m => m.id === action.id ? {...m, filter: action.filter} : m)\r\n        case TLActionType.CHANGETITLE_TL:\r\n            return state.map(m => m.id === action.id ? {...m, title: action.title} : m)\r\n        case TLActionType.CHANGE_TODOLIST_ENTITY_STATUS:\r\n            return state.map(m => m.id === action.todolistId ? {...m, entityStatus: action.entityStatus} : m)\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\n// Action creator\r\n\r\nexport const changeFilterTL_AC = (todolistId: string, filter: FilterValuesType) => {\r\n    return {\r\n        type: TLActionType.SET_FILTER,\r\n        id: todolistId,\r\n        filter\r\n    } as const\r\n}\r\nexport const deleteTL_AC = (todolistId: string) => {\r\n    return {\r\n        type: TLActionType.DELETE_TL,\r\n        id: todolistId\r\n    } as const\r\n}\r\nexport const addTodolist_AC = (todo: TodolistAPIType) => {\r\n    return {\r\n        type: TLActionType.ADD_TL,\r\n        todo,\r\n    } as const\r\n}\r\nexport const changeTitleTL_AC = (todolistId: string, title: string) => {\r\n    return {\r\n        type: TLActionType.CHANGETITLE_TL,\r\n        id: todolistId,\r\n        title\r\n    } as const\r\n}\r\nexport const getTodolists_AC = (todolists: Array<TodosType>) => {\r\n    return {\r\n        type: TLActionType.GET_TL,\r\n        todolists\r\n    } as const\r\n}\r\nexport const changeTodolistEntityStatusAC = (todolistId: string, entityStatus: RequestStatusType) => {\r\n    return {\r\n        type: TLActionType.CHANGE_TODOLIST_ENTITY_STATUS,\r\n        entityStatus,\r\n        todolistId\r\n    } as const\r\n}\r\n\r\n// Thunk creator\r\n\r\nexport const getTodolistsTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.getTodolists()\r\n        .then(res => {\r\n            let todoWithFilter = res.data\r\n                .map(m => ({...m, filter: getFilter(m.id), entityStatus: 'idle' as RequestStatusType}))\r\n            dispatch(getTodolists_AC(todoWithFilter))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const createTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.createTodolist(title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTodolist_AC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                dispatch(setAppErrorAC(res.data.messages[0]))\r\n                dispatch(setAppStatusAC('failed'))\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const deleteTodolistTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    handleServerTodolistResponse(todolistId, 'loading', dispatch)\r\n    todolistAPI.deleteTodolist(todolistId)\r\n        .then(() => {\r\n            dispatch(deleteTL_AC(todolistId))\r\n            handleServerTodolistResponse(todolistId, 'succeeded', dispatch)\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(error, dispatch)\r\n            dispatch(changeTodolistEntityStatusAC(todolistId, 'failed'))\r\n        })\r\n}\r\nexport const updateTodolistTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n    handleServerTodolistResponse(todolistId, 'loading', dispatch)\r\n    todolistAPI.updateTodolist(todolistId, title)\r\n        .then(() => {\r\n            dispatch(changeTitleTL_AC(todolistId, title))\r\n            handleServerTodolistResponse(todolistId, 'succeeded', dispatch)\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(error, dispatch)\r\n            dispatch(changeTodolistEntityStatusAC(todolistId, 'failed'))\r\n        })\r\n}\r\nexport const saveFilterToLocalStorage = (todolists: Array<TodosType>) => () => {\r\n    todolists.map(m => {\r\n        return localStorage.setItem(m.id, m.filter)\r\n    })\r\n}\r\n\r\n\r\n\r\n","import { Dispatch } from 'redux';\r\nimport {AxiosError} from 'axios';\r\nimport {AppErrorType, AppStatusType, RequestStatusType, setAppErrorAC, setAppStatusAC} from '../reducers/App-reducer';\r\nimport {changeTaskEntityStatusAC, ChangeTaskEntityStatusType} from '../reducers/Tasks_Reducer';\r\nimport {\r\n    changeTodolistEntityStatusAC,\r\n    ChangeTodolistEntityStatusType,\r\n    FilterValuesType\r\n} from '../reducers/Todolists_Reducer';\r\n\r\n// generic function\r\nexport const handleServerTaskResponse =\r\n    (todolistId: string, taskId:string, status: RequestStatusType, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppStatusAC(status))\r\n    dispatch(changeTaskEntityStatusAC(todolistId, status, taskId))\r\n}\r\nexport const handleServerTodolistResponse =\r\n    (todolistId: string, status: RequestStatusType, dispatch: ErrorUtilsDispatchType) => {\r\n        dispatch(setAppStatusAC(status))\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, status))\r\n    }\r\n\r\nexport const handleServerNetworkError = (error: AxiosError, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC(error.message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\n\r\nexport const getFilter = (id:string)=>{\r\n    return localStorage.getItem(id) as FilterValuesType || 'all'\r\n}\r\ntype ErrorUtilsDispatchType = Dispatch<AppStatusType\r\n    | AppErrorType | ChangeTaskEntityStatusType | ChangeTodolistEntityStatusType>\r\n","import React, {ChangeEvent} from 'react';\r\nimport {deleteTaskTC, updateTaskTC} from './reducers/Tasks_Reducer';\r\nimport {TaskDomainType, TaskStatuses} from './api/TaskAPI';\r\nimport {Checkbox, CircularProgress, IconButton} from '@mui/material';\r\nimport EditItem from './components/EditItem';\r\nimport {Delete} from '@mui/icons-material';\r\nimport {useDispatch} from 'react-redux';\r\nimport {RequestStatusType} from './reducers/App-reducer';\r\n\r\ntype PropsType = {\r\n    task: TaskDomainType & {\r\n        entityStatus: RequestStatusType\r\n    }\r\n}\r\n\r\n\r\nconst Tasks = ({task}: PropsType) => {\r\n    const dispatch = useDispatch()\r\n    const onClickHandler = () => dispatch(deleteTaskTC(task.todoListId, task.id))\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const status = e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New\r\n        dispatch(updateTaskTC(task.todoListId, task.id, {status}))\r\n    }\r\n    const editTask = (title: string) => {\r\n        dispatch(updateTaskTC(task.todoListId, task.id, {title}))\r\n    }\r\n    return <div key={task.id} className={task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox color={'primary'}\r\n                  onChange={onChangeHandler}\r\n                  checked={task.status > 0}/>\r\n        <EditItem title={task.title} editStateItem={editTask} entityStatus={task.entityStatus}/>\r\n        <IconButton onClick={onClickHandler} disabled={task.entityStatus === 'loading'}>\r\n            {\r\n                task.entityStatus === 'loading'\r\n                ?\r\n                <CircularProgress disableShrink size={17}/>\r\n                :\r\n                <Delete/>\r\n            }\r\n        </IconButton>\r\n    </div>\r\n};\r\n\r\nexport default Tasks;\r\n","import React, {useEffect} from 'react';\r\nimport AddItem from './components/AddItem';\r\nimport EditItem from './components/EditItem';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {rootReducerType} from './store/store';\r\nimport {changeFilterTL_AC, deleteTodolistTC, TodosType, updateTodolistTC} from './reducers/Todolists_Reducer';\r\nimport {addTaskTC, getTasksTC, TasksType,} from './reducers/Tasks_Reducer';\r\nimport {TaskStatuses} from './api/TaskAPI';\r\nimport {Delete} from '@mui/icons-material';\r\nimport {Button, CircularProgress, IconButton} from '@mui/material';\r\nimport {RequestStatusType} from './reducers/App-reducer';\r\nimport Tasks from './Tasks';\r\n\r\n\r\ntype PropsType = {\r\n    todolistId: string\r\n}\r\n\r\n\r\nexport const Todolist = React.memo(({todolistId}: PropsType) => {\r\n    let tasks = useSelector<rootReducerType, TasksType>(state => state.tasks)\r\n    let todolist = useSelector<rootReducerType, TodosType>(state => state.todolists.filter(f => f.id === todolistId)[0])\r\n    let dispatch = useDispatch();\r\n    let todolistEntityStatus = useSelector<rootReducerType, RequestStatusType>(state => state.todolists\r\n        .filter(f => f.id === todolistId)[0].entityStatus)\r\n\r\n    const onAllClickHandler = () => dispatch(changeFilterTL_AC(todolistId, 'all'));\r\n    const onActiveClickHandler = () => dispatch(changeFilterTL_AC(todolistId, 'active'));\r\n    const onCompletedClickHandler = () => dispatch(changeFilterTL_AC(todolistId, 'completed'));\r\n    const addItem = (title: string) => {\r\n        dispatch(addTaskTC(todolistId, title))\r\n    }\r\n    const editTL = (title: string) => {\r\n        dispatch(updateTodolistTC(todolistId, title))\r\n    }\r\n    let tasksForTodolist = tasks[todolistId];\r\n\r\n    if (todolist.filter === 'active') {\r\n        tasksForTodolist = tasksForTodolist.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (todolist.filter === 'completed') {\r\n        tasksForTodolist = tasksForTodolist.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    const deleteTodo = () => {\r\n        dispatch(deleteTodolistTC(todolistId))\r\n    }\r\n    useEffect(() => {\r\n        dispatch(getTasksTC(todolistId))\r\n    }, [])\r\n\r\n\r\n\r\n    return <div>\r\n        <h3><EditItem title={todolist.title} editStateItem={editTL} entityStatus={todolistEntityStatus}/>\r\n            <IconButton onClick={deleteTodo} disabled={todolistEntityStatus === 'loading'}>\r\n                {\r\n                    todolistEntityStatus === 'loading'\r\n                        ?\r\n                        <CircularProgress disableShrink size={17}/>\r\n                        :\r\n                        <Delete/>\r\n                }\r\n            </IconButton>\r\n        </h3>\r\n        <AddItem addItem={addItem} disabled={todolistEntityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => (\r\n                    <Tasks key={t.id}\r\n                           task={t}\r\n                    />\r\n                ))\r\n            }\r\n        </div>\r\n        <div>\r\n            <Button\r\n                variant={todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                onClick={onAllClickHandler}\r\n                color={'inherit'}\r\n            >\r\n                All\r\n            </Button>\r\n            <Button\r\n                variant={todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                onClick={onActiveClickHandler}\r\n                color={'primary'}\r\n            >\r\n                Active\r\n            </Button>\r\n            <Button\r\n                variant={todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                onClick={onCompletedClickHandler}\r\n                color={'secondary'}\r\n            >\r\n                Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {rootReducerType} from '../store/store';\r\nimport {setAppErrorAC} from '../reducers/App-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n    const dispatch = useDispatch()\r\n    const error = useSelector<rootReducerType, null | string>(state => state.app.error)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error + ' 😠'}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport AddItem from './components/AddItem';\r\nimport {createTodolistTC, getTodolistsTC, saveFilterToLocalStorage, TodosType} from './reducers/Todolists_Reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {rootReducerType} from './store/store';\r\n\r\nimport {RequestStatusType} from './reducers/App-reducer';\r\nimport {AppBar, Button, Container, Grid, IconButton, LinearProgress, Paper, Toolbar, Typography} from '@mui/material';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from './components/ErrorSnackbar';\r\n\r\n\r\nfunction App() {\r\n\r\n    let dispatch = useDispatch();\r\n    let todolists = useSelector<rootReducerType, Array<TodosType>>(state => state.todolists)\r\n    let status = useSelector<rootReducerType, RequestStatusType>(state => state.app.status)\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(createTodolistTC(title))\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        dispatch(getTodolistsTC())\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        dispatch(saveFilterToLocalStorage(todolists))\r\n    }, [todolists])\r\n\r\n    return (\r\n\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position={'static'}>\r\n                <Toolbar>\r\n                    <IconButton edge={'start'}\r\n                                color={'inherit'}\r\n                                area-label={'menu'}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={'h6'}>\r\n                        News\r\n                    </Typography>\r\n                    <Button color={'inherit'}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            {\r\n                status === 'loading' &&\r\n                <LinearProgress color=\"primary\" style={{position: 'relative'}}/>\r\n            }\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px'}}>\r\n                    <AddItem addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            return (\r\n                                <Grid item\r\n                                      key={tl.id}>\r\n\r\n                                    <Paper style={{padding: '10px'}}>\r\n                                        <Todolist\r\n                                            todolistId={tl.id}\r\n                                        />\r\n                                    </Paper>\r\n                                </Grid>\r\n                            )\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {reducerTasks} from '../reducers/Tasks_Reducer';\r\nimport {reducerTL} from '../reducers/Todolists_Reducer';\r\nimport thunk from 'redux-thunk';\r\nimport {appReducer} from '../reducers/App-reducer';\r\n\r\n// let stateFromLS;\r\n// let stateString = localStorage.getItem('state')\r\n// if(stateString){\r\n//     stateFromLS = JSON.parse(stateString)\r\n// }\r\n\r\nlet rootReducer = combineReducers({\r\n    tasks: reducerTasks,\r\n    todolists: reducerTL,\r\n    app: appReducer\r\n})\r\n\r\n\r\nexport type rootReducerType = ReturnType<typeof rootReducer>;\r\nexport let store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\n// store.subscribe(() => {\r\n//     localStorage.setItem('state', JSON.stringify(store.getState().todolists))\r\n// })\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './store/store';\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n    <App/>\r\n</Provider>,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}